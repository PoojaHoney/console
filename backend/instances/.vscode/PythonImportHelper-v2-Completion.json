[
    {
        "label": "Response",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ComputeEngine",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "IAM_Role",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Instance",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "VPC",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ComputeEngine",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "IAM_Role",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "VPC",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "SubNetwork",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "FireWall",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Instance",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "IAM_Role",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "VPC",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ComputeEngine",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "artifactRegistry",
        "importPath": "api_v1.handlers.sdk",
        "description": "api_v1.handlers.sdk",
        "isExtraImport": true,
        "detail": "api_v1.handlers.sdk",
        "documentation": {}
    },
    {
        "label": "compute",
        "importPath": "api_v1.handlers.sdk",
        "description": "api_v1.handlers.sdk",
        "isExtraImport": true,
        "detail": "api_v1.handlers.sdk",
        "documentation": {}
    },
    {
        "label": "iam",
        "importPath": "api_v1.handlers.sdk",
        "description": "api_v1.handlers.sdk",
        "isExtraImport": true,
        "detail": "api_v1.handlers.sdk",
        "documentation": {}
    },
    {
        "label": "vpc",
        "importPath": "api_v1.handlers.sdk",
        "description": "api_v1.handlers.sdk",
        "isExtraImport": true,
        "detail": "api_v1.handlers.sdk",
        "documentation": {}
    },
    {
        "label": "iam",
        "importPath": "api_v1.handlers.sdk",
        "description": "api_v1.handlers.sdk",
        "isExtraImport": true,
        "detail": "api_v1.handlers.sdk",
        "documentation": {}
    },
    {
        "label": "vpc",
        "importPath": "api_v1.handlers.sdk",
        "description": "api_v1.handlers.sdk",
        "isExtraImport": true,
        "detail": "api_v1.handlers.sdk",
        "documentation": {}
    },
    {
        "label": "compute",
        "importPath": "api_v1.handlers.sdk",
        "description": "api_v1.handlers.sdk",
        "isExtraImport": true,
        "detail": "api_v1.handlers.sdk",
        "documentation": {}
    },
    {
        "label": "artifactRegistry",
        "importPath": "api_v1.handlers.sdk",
        "description": "api_v1.handlers.sdk",
        "isExtraImport": true,
        "detail": "api_v1.handlers.sdk",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "api_v1.handlers.sdk",
        "description": "api_v1.handlers.sdk",
        "isExtraImport": true,
        "detail": "api_v1.handlers.sdk",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "constants",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "constants",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "constants",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "constants",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "instances",
        "importPath": "api_v1.handlers",
        "description": "api_v1.handlers",
        "isExtraImport": true,
        "detail": "api_v1.handlers",
        "documentation": {}
    },
    {
        "label": "delete_instance_compute_engine",
        "importPath": "api_v1.handlers.instances",
        "description": "api_v1.handlers.instances",
        "isExtraImport": true,
        "detail": "api_v1.handlers.instances",
        "documentation": {}
    },
    {
        "label": "artifactRegistry",
        "importPath": "cloudProviders.gcp",
        "description": "cloudProviders.gcp",
        "isExtraImport": true,
        "detail": "cloudProviders.gcp",
        "documentation": {}
    },
    {
        "label": "compute",
        "importPath": "cloudProviders.gcp",
        "description": "cloudProviders.gcp",
        "isExtraImport": true,
        "detail": "cloudProviders.gcp",
        "documentation": {}
    },
    {
        "label": "vpc",
        "importPath": "cloudProviders.gcp",
        "description": "cloudProviders.gcp",
        "isExtraImport": true,
        "detail": "cloudProviders.gcp",
        "documentation": {}
    },
    {
        "label": "cloudProviders.gcp.credentials",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudProviders.gcp.credentials",
        "description": "cloudProviders.gcp.credentials",
        "detail": "cloudProviders.gcp.credentials",
        "documentation": {}
    },
    {
        "label": "get_gcp_crds",
        "importPath": "cloudProviders.gcp.credentials",
        "description": "cloudProviders.gcp.credentials",
        "isExtraImport": true,
        "detail": "cloudProviders.gcp.credentials",
        "documentation": {}
    },
    {
        "label": "get_gcp_crds",
        "importPath": "cloudProviders.gcp.credentials",
        "description": "cloudProviders.gcp.credentials",
        "isExtraImport": true,
        "detail": "cloudProviders.gcp.credentials",
        "documentation": {}
    },
    {
        "label": "get_gcp_crds",
        "importPath": "cloudProviders.gcp.credentials",
        "description": "cloudProviders.gcp.credentials",
        "isExtraImport": true,
        "detail": "cloudProviders.gcp.credentials",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "jsonable_encoder",
        "importPath": "fastapi.encoders",
        "description": "fastapi.encoders",
        "isExtraImport": true,
        "detail": "fastapi.encoders",
        "documentation": {}
    },
    {
        "label": "jsonable_encoder",
        "importPath": "fastapi.encoders",
        "description": "fastapi.encoders",
        "isExtraImport": true,
        "detail": "fastapi.encoders",
        "documentation": {}
    },
    {
        "label": "jsonable_encoder",
        "importPath": "fastapi.encoders",
        "description": "fastapi.encoders",
        "isExtraImport": true,
        "detail": "fastapi.encoders",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "cloudProviders.gcp.iam",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudProviders.gcp.iam",
        "description": "cloudProviders.gcp.iam",
        "detail": "cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "api_v1.handlers.sdk.storage",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "api_v1.handlers.sdk.storage",
        "description": "api_v1.handlers.sdk.storage",
        "detail": "api_v1.handlers.sdk.storage",
        "documentation": {}
    },
    {
        "label": "service_account",
        "importPath": "google.oauth2",
        "description": "google.oauth2",
        "isExtraImport": true,
        "detail": "google.oauth2",
        "documentation": {}
    },
    {
        "label": "service_account",
        "importPath": "google.oauth2",
        "description": "google.oauth2",
        "isExtraImport": true,
        "detail": "google.oauth2",
        "documentation": {}
    },
    {
        "label": "service_account",
        "importPath": "google.oauth2",
        "description": "google.oauth2",
        "isExtraImport": true,
        "detail": "google.oauth2",
        "documentation": {}
    },
    {
        "label": "service_account",
        "importPath": "google.oauth2",
        "description": "google.oauth2",
        "isExtraImport": true,
        "detail": "google.oauth2",
        "documentation": {}
    },
    {
        "label": "service_account",
        "importPath": "google.oauth2",
        "description": "google.oauth2",
        "isExtraImport": true,
        "detail": "google.oauth2",
        "documentation": {}
    },
    {
        "label": "service_account",
        "importPath": "google.oauth2",
        "description": "google.oauth2",
        "isExtraImport": true,
        "detail": "google.oauth2",
        "documentation": {}
    },
    {
        "label": "service_account",
        "importPath": "google.oauth2",
        "description": "google.oauth2",
        "isExtraImport": true,
        "detail": "google.oauth2",
        "documentation": {}
    },
    {
        "label": "service_account",
        "importPath": "google.oauth2",
        "description": "google.oauth2",
        "isExtraImport": true,
        "detail": "google.oauth2",
        "documentation": {}
    },
    {
        "label": "cloudProviders.gcp.storage",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudProviders.gcp.storage",
        "description": "cloudProviders.gcp.storage",
        "detail": "cloudProviders.gcp.storage",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "iam",
        "importPath": "api_v1.endpoints",
        "description": "api_v1.endpoints",
        "isExtraImport": true,
        "detail": "api_v1.endpoints",
        "documentation": {}
    },
    {
        "label": "vpc",
        "importPath": "api_v1.endpoints",
        "description": "api_v1.endpoints",
        "isExtraImport": true,
        "detail": "api_v1.endpoints",
        "documentation": {}
    },
    {
        "label": "compute",
        "importPath": "api_v1.endpoints",
        "description": "api_v1.endpoints",
        "isExtraImport": true,
        "detail": "api_v1.endpoints",
        "documentation": {}
    },
    {
        "label": "instances",
        "importPath": "api_v1.endpoints",
        "description": "api_v1.endpoints",
        "isExtraImport": true,
        "detail": "api_v1.endpoints",
        "documentation": {}
    },
    {
        "label": "artifactRegistry",
        "importPath": "api_v1.endpoints",
        "description": "api_v1.endpoints",
        "isExtraImport": true,
        "detail": "api_v1.endpoints",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "googleapiclient.discovery",
        "description": "googleapiclient.discovery",
        "isExtraImport": true,
        "detail": "googleapiclient.discovery",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "googleapiclient.discovery",
        "description": "googleapiclient.discovery",
        "isExtraImport": true,
        "detail": "googleapiclient.discovery",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "googleapiclient.discovery",
        "description": "googleapiclient.discovery",
        "isExtraImport": true,
        "detail": "googleapiclient.discovery",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "googleapiclient.discovery",
        "description": "googleapiclient.discovery",
        "isExtraImport": true,
        "detail": "googleapiclient.discovery",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "google.cloud",
        "description": "google.cloud",
        "isExtraImport": true,
        "detail": "google.cloud",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "api_router",
        "importPath": "api_v1.api",
        "description": "api_v1.api",
        "isExtraImport": true,
        "detail": "api_v1.api",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "get_artifact_registry",
        "kind": 2,
        "importPath": "api_v1.endpoints.artifactRegistry",
        "description": "api_v1.endpoints.artifactRegistry",
        "peekOfCode": "def get_artifact_registry(cloud_provider: str, framework: str, registry_name: str = Query(default=None, max_length=200)):\n    try:\n        if cloud_provider and framework:\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n                if framework == constants.SDK_FRAMEWORK:\n                    return SDK_ArtifactRegistry.list_artifact_registries(registry_name=registry_name)\n    except Exception as exp:\n        return API_Response(error=exp, statusCode=400).model_dump()\n@router.get(\"/artifact_registry_permissions/{cloud_provider}/{framework}\")\ndef get_artifact_registry_permissions(cloud_provider: str, framework: str, registry_name: str = Query(default=None, max_length=200)):",
        "detail": "api_v1.endpoints.artifactRegistry",
        "documentation": {}
    },
    {
        "label": "get_artifact_registry_permissions",
        "kind": 2,
        "importPath": "api_v1.endpoints.artifactRegistry",
        "description": "api_v1.endpoints.artifactRegistry",
        "peekOfCode": "def get_artifact_registry_permissions(cloud_provider: str, framework: str, registry_name: str = Query(default=None, max_length=200)):\n    try:\n        if cloud_provider and framework:\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n                if framework == constants.SDK_FRAMEWORK:\n                    return SDK_ArtifactRegistry.get_artifact_registry_permissions(repository_id=registry_name)\n    except Exception as exp:\n        return API_Response(error=exp, statusCode=400).model_dump()",
        "detail": "api_v1.endpoints.artifactRegistry",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api_v1.endpoints.artifactRegistry",
        "description": "api_v1.endpoints.artifactRegistry",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/artifact_registry/{cloud_provider}/{framework}\")\ndef get_artifact_registry(cloud_provider: str, framework: str, registry_name: str = Query(default=None, max_length=200)):\n    try:\n        if cloud_provider and framework:\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n                if framework == constants.SDK_FRAMEWORK:\n                    return SDK_ArtifactRegistry.list_artifact_registries(registry_name=registry_name)\n    except Exception as exp:\n        return API_Response(error=exp, statusCode=400).model_dump()",
        "detail": "api_v1.endpoints.artifactRegistry",
        "documentation": {}
    },
    {
        "label": "get_compute",
        "kind": 2,
        "importPath": "api_v1.endpoints.compute",
        "description": "api_v1.endpoints.compute",
        "peekOfCode": "def get_compute(cloud_provider: str, framework: str, compute_engine_name: str = Query(default=None, max_length=200)):\n    try:\n        if cloud_provider and framework:\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n                if framework == constants.SDK_FRAMEWORK:\n                    return SDK_Compute.list_compute_engines(compute_engine_name=compute_engine_name)\n    except Exception as exp:\n        return API_Response(error=exp, statusCode=400).model_dump()\n@router.post(\"/compute/{cloud_provider}/{framework}\")\ndef create_compute(cloud_provider: str, details: ComputeEngine_Schema, framework: str):",
        "detail": "api_v1.endpoints.compute",
        "documentation": {}
    },
    {
        "label": "create_compute",
        "kind": 2,
        "importPath": "api_v1.endpoints.compute",
        "description": "api_v1.endpoints.compute",
        "peekOfCode": "def create_compute(cloud_provider: str, details: ComputeEngine_Schema, framework: str):\n    try:\n        if cloud_provider and framework:\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n                if framework == constants.SDK_FRAMEWORK:\n                    return SDK_Compute.create_compute_engine(details=details)\n    except Exception as exp:\n        return API_Response(error=exp, statusCode=400).model_dump()\n@router.delete(\"/compute/{cloud_provider}/{framework}\")\ndef delete_compute(cloud_provider: str, compute_engine: str, framework: str):",
        "detail": "api_v1.endpoints.compute",
        "documentation": {}
    },
    {
        "label": "delete_compute",
        "kind": 2,
        "importPath": "api_v1.endpoints.compute",
        "description": "api_v1.endpoints.compute",
        "peekOfCode": "def delete_compute(cloud_provider: str, compute_engine: str, framework: str):\n    try:\n        if cloud_provider and framework:\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n                if framework == constants.SDK_FRAMEWORK:\n                    return SDK_Compute.delete_compute_engine(compute_engine_name=compute_engine)\n        else:\n            return API_Response(error=\"cloud_provider and framework are required\", statusCode=400).model_dump()\n    except Exception as exp:\n        return API_Response(error=exp, statusCode=400).model_dump()",
        "detail": "api_v1.endpoints.compute",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api_v1.endpoints.compute",
        "description": "api_v1.endpoints.compute",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/compute/{cloud_provider}/{framework}\")\ndef get_compute(cloud_provider: str, framework: str, compute_engine_name: str = Query(default=None, max_length=200)):\n    try:\n        if cloud_provider and framework:\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n                if framework == constants.SDK_FRAMEWORK:\n                    return SDK_Compute.list_compute_engines(compute_engine_name=compute_engine_name)\n    except Exception as exp:\n        return API_Response(error=exp, statusCode=400).model_dump()",
        "detail": "api_v1.endpoints.compute",
        "documentation": {}
    },
    {
        "label": "create_iam_role",
        "kind": 2,
        "importPath": "api_v1.endpoints.iam",
        "description": "api_v1.endpoints.iam",
        "peekOfCode": "def create_iam_role(cloud_provider: str, details: IAM_Role, framework: str):\n    try:\n        if cloud_provider and framework:\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n                if framework == constants.SDK_FRAMEWORK:\n                    return SDK_IAM.create_service_account(details=details)\n        else:\n            return API_Response(error=\"cloud_provider and framework are required\", statusCode=400).model_dump()\n    except Exception as exp:\n        return API_Response(error=exp, statusCode=400).model_dump()",
        "detail": "api_v1.endpoints.iam",
        "documentation": {}
    },
    {
        "label": "update_iam_role",
        "kind": 2,
        "importPath": "api_v1.endpoints.iam",
        "description": "api_v1.endpoints.iam",
        "peekOfCode": "def update_iam_role(cloud_provider: str, details: IAM_Role, action: str, framework: str):\n    try:\n        if cloud_provider and framework:\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n                if framework == constants.SDK_FRAMEWORK:\n                    return SDK_IAM.update_service_account(details=details, action=action)\n        else:\n            return API_Response(error=\"cloud_provider and framework are required\", statusCode=400).model_dump()\n    except Exception as exp:\n        return API_Response(error=exp, statusCode=400).model_dump()",
        "detail": "api_v1.endpoints.iam",
        "documentation": {}
    },
    {
        "label": "delete_iam_role",
        "kind": 2,
        "importPath": "api_v1.endpoints.iam",
        "description": "api_v1.endpoints.iam",
        "peekOfCode": "def delete_iam_role(cloud_provider: str, service_account: str, framework: str,\n                    product: str = Query(default=\"\"),\n                    instanceId: str = Query(default=\"\")):\n    try:\n        if cloud_provider and framework:\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n                if framework == constants.SDK_FRAMEWORK:\n                    return SDK_IAM.delete_service_account(service_account=service_account, instanceId=instanceId, product=product)\n        else:\n            return API_Response(error=\"cloud_provider and framework are required\", statusCode=400).model_dump()",
        "detail": "api_v1.endpoints.iam",
        "documentation": {}
    },
    {
        "label": "get_iam_roles",
        "kind": 2,
        "importPath": "api_v1.endpoints.iam",
        "description": "api_v1.endpoints.iam",
        "peekOfCode": "def get_iam_roles(cloud_provider: str, framework: str, service_account: str = Query(default=None, max_length=200)):\n    try:\n        if cloud_provider and framework:\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n                if framework == constants.SDK_FRAMEWORK:\n                    return SDK_IAM.list_service_accounts(service_account=service_account)\n        else:\n            return API_Response(error=\"cloud_provider and framework are required\", statusCode=400).model_dump()\n    except Exception as exp:\n        return API_Response(error=exp, statusCode=400).model_dump()",
        "detail": "api_v1.endpoints.iam",
        "documentation": {}
    },
    {
        "label": "get_iam_role_key",
        "kind": 2,
        "importPath": "api_v1.endpoints.iam",
        "description": "api_v1.endpoints.iam",
        "peekOfCode": "def get_iam_role_key(cloud_provider: str, service_account: str, framework: str,\n                    product: str = Query(default=\"\"),\n                    instanceId: str = Query(default=\"\")):\n    try:\n        if cloud_provider and framework:\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n                if framework == constants.SDK_FRAMEWORK:\n                    return SDK_IAM.get_service_account_key(service_account=service_account, product=product, instanceId=instanceId)\n        else:\n            return API_Response(error=\"cloud_provider and framework are required\", statusCode=400).model_dump()",
        "detail": "api_v1.endpoints.iam",
        "documentation": {}
    },
    {
        "label": "get_iam_role_permissions",
        "kind": 2,
        "importPath": "api_v1.endpoints.iam",
        "description": "api_v1.endpoints.iam",
        "peekOfCode": "def get_iam_role_permissions(cloud_provider: str, role_name: str, framework: str):\n    try:\n        if cloud_provider and framework:\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n                if framework == constants.SDK_FRAMEWORK:\n                    return SDK_IAM.get_service_account_permissions(role_name=role_name)\n        else:\n            return API_Response(error=\"cloud_provider and framework are required\", statusCode=400).model_dump()\n    except Exception as exp:\n        return API_Response(error=exp, statusCode=400).model_dump()",
        "detail": "api_v1.endpoints.iam",
        "documentation": {}
    },
    {
        "label": "create_iam_role_key",
        "kind": 2,
        "importPath": "api_v1.endpoints.iam",
        "description": "api_v1.endpoints.iam",
        "peekOfCode": "def create_iam_role_key(cloud_provider: str, service_account: str, framework: str):\n    try:\n        if cloud_provider and framework:\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n                if framework == constants.SDK_FRAMEWORK:\n                    return SDK_IAM.create_service_account_key(service_account=service_account)\n        else:\n            return API_Response(error=\"cloud_provider and framework are required\", statusCode=400).model_dump()\n    except Exception as exp:\n        return API_Response(error=exp, statusCode=400).model_dump()",
        "detail": "api_v1.endpoints.iam",
        "documentation": {}
    },
    {
        "label": "create_iam_predefined_roles",
        "kind": 2,
        "importPath": "api_v1.endpoints.iam",
        "description": "api_v1.endpoints.iam",
        "peekOfCode": "def create_iam_predefined_roles(cloud_provider: str, framework: str) -> API_Response:\n    try:\n        if cloud_provider and framework:\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n                if framework == constants.SDK_FRAMEWORK:\n                    response = SDK_IAM.create_iam_predefined_roles()\n                    return response\n        else:\n            return API_Response(error=\"cloud_provider and framework are required\", statusCode=400).model_dump()\n    except Exception as exp:",
        "detail": "api_v1.endpoints.iam",
        "documentation": {}
    },
    {
        "label": "get_iam_predefined_roles",
        "kind": 2,
        "importPath": "api_v1.endpoints.iam",
        "description": "api_v1.endpoints.iam",
        "peekOfCode": "def get_iam_predefined_roles(cloud_provider: str,\n                             framework: str,\n                             filter: str = Query(default=None, max_length=200)):\n    try:\n        if cloud_provider and framework:\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n                if framework == constants.SDK_FRAMEWORK:\n                    return SDK_IAM.get_iam_predefined_roles(filter=filter)\n        else:\n            return API_Response(error=\"cloud_provider and framework are required\", statusCode=400).model_dump()",
        "detail": "api_v1.endpoints.iam",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api_v1.endpoints.iam",
        "description": "api_v1.endpoints.iam",
        "peekOfCode": "router = APIRouter()\n# --------------------------------------SERVICE ACCOUNT/IAM ROLES APIs----------------------------------------\n@router.post(\"/iam_role/{cloud_provider}/{framework}\")\ndef create_iam_role(cloud_provider: str, details: IAM_Role, framework: str):\n    try:\n        if cloud_provider and framework:\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n                if framework == constants.SDK_FRAMEWORK:\n                    return SDK_IAM.create_service_account(details=details)\n        else:",
        "detail": "api_v1.endpoints.iam",
        "documentation": {}
    },
    {
        "label": "create_instance",
        "kind": 2,
        "importPath": "api_v1.endpoints.instances",
        "description": "api_v1.endpoints.instances",
        "peekOfCode": "def create_instance(details: Instance):\n    try:\n        if details.version == \"\":\n            return API_Response(error=\"product version cannot be empty in instance creation\", statusCode=400).model_dump()\n        # product = databases.get_mongo_collection(\n        #     db_name=settings.PRODUCT_DATABASE, collection_name=settings.PRODUCT_FULL_DETAILS).find_one({\"productID\": details.productID})\n        with open(\"input.json\", \"r\") as f:\n            product = json.load(f)\n        if product is None or product.get(\"productID\") != details.productID or product.get(\"productID\") == \"\":\n            return API_Response(error=\"Product not found or does not exists\", statusCode=404).model_dump()",
        "detail": "api_v1.endpoints.instances",
        "documentation": {}
    },
    {
        "label": "delete_instance",
        "kind": 2,
        "importPath": "api_v1.endpoints.instances",
        "description": "api_v1.endpoints.instances",
        "peekOfCode": "def delete_instance(instance_id: str, product: str, name: str):\n    try:\n        result = delete_instance_compute_engine(\n            name=name, instanceId=instance_id, product=product)\n        return result\n    except Exception as exp:\n        return API_Response(error=exp, statusCode=400).model_dump()",
        "detail": "api_v1.endpoints.instances",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api_v1.endpoints.instances",
        "description": "api_v1.endpoints.instances",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/create\", response_model=API_Response)\ndef create_instance(details: Instance):\n    try:\n        if details.version == \"\":\n            return API_Response(error=\"product version cannot be empty in instance creation\", statusCode=400).model_dump()\n        # product = databases.get_mongo_collection(\n        #     db_name=settings.PRODUCT_DATABASE, collection_name=settings.PRODUCT_FULL_DETAILS).find_one({\"productID\": details.productID})\n        with open(\"input.json\", \"r\") as f:\n            product = json.load(f)",
        "detail": "api_v1.endpoints.instances",
        "documentation": {}
    },
    {
        "label": "create_vpc",
        "kind": 2,
        "importPath": "api_v1.endpoints.vpc",
        "description": "api_v1.endpoints.vpc",
        "peekOfCode": "def create_vpc(cloud_provider: str, framework: str,  details: VPC_Schema):\n    try:\n        if cloud_provider and framework:\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n                if framework == constants.SDK_FRAMEWORK:\n                    return SDK_VPC.create_vpc_subnetwork_firewall(details=details)\n    except Exception as exp:\n        return API_Response(error=exp, statusCode=400).model_dump()\n@router.delete(\"/vpc/{cloud_provider}/{framework}\")\ndef delete_vpc(cloud_provider: str, framework: str, vpc_name: str):",
        "detail": "api_v1.endpoints.vpc",
        "documentation": {}
    },
    {
        "label": "delete_vpc",
        "kind": 2,
        "importPath": "api_v1.endpoints.vpc",
        "description": "api_v1.endpoints.vpc",
        "peekOfCode": "def delete_vpc(cloud_provider: str, framework: str, vpc_name: str):\n    try:\n        if cloud_provider and framework:\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n                if framework == constants.SDK_FRAMEWORK:\n                    return SDK_VPC.delete_vpc(vpc_name=vpc_name)\n    except Exception as exp:\n        return API_Response(error=exp, statusCode=400).model_dump()",
        "detail": "api_v1.endpoints.vpc",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api_v1.endpoints.vpc",
        "description": "api_v1.endpoints.vpc",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/vpc/{cloud_provider}/{framework}\")\nasync def get_vpc(cloud_provider: str, framework: str, vpc_name: str = Query(default=None, max_length=200)):\n    print(\"VPC: \", vpc_name, framework, cloud_provider)\n    try:\n        print(\"Cloud Provider SETTINGS: \", settings.GCP_Config.CLOUD_PROVIDER)\n        print(\"SDK Framework CONST: \", constants.SDK_FRAMEWORK)\n        if cloud_provider and framework:\n            print(\"errtwytrerretrtert\")\n            if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:",
        "detail": "api_v1.endpoints.vpc",
        "documentation": {}
    },
    {
        "label": "list_artifact_registries",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.artifactRegistry",
        "description": "api_v1.handlers.sdk.artifactRegistry",
        "peekOfCode": "def list_artifact_registries(registry_name: str):\n    gcp_client = GCP_Crds.get_gcp_crds({\"project_id\":settings.GCP_Config.PROJECT_ID,\n                            \"private_key_id\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                            \"private_key\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                            \"client_email\":settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                            \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                        })\n    artifact_registries = ArtifaceRegistry.list_artifact_repositories(gcp_crds=gcp_client, region=settings.GCP_Config.DEFAULT_REGION)\n    return API_Response(message=\"Artifact Registries fetched successfully\", data=artifact_registries, statusCode=200).model_dump()\ndef get_artifact_registry_permissions(repository_id: str, gcp_client = None):",
        "detail": "api_v1.handlers.sdk.artifactRegistry",
        "documentation": {}
    },
    {
        "label": "get_artifact_registry_permissions",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.artifactRegistry",
        "description": "api_v1.handlers.sdk.artifactRegistry",
        "peekOfCode": "def get_artifact_registry_permissions(repository_id: str, gcp_client = None):\n    if gcp_client is None:\n        gcp_client = GCP_Crds.get_gcp_crds({\"project_id\":settings.GCP_Config.PROJECT_ID,\n                                \"private_key_id\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                \"private_key\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                \"client_email\":settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                            })\n    artifact_registries = ArtifaceRegistry.get_artifact_registry_permissions(gcp_crds=gcp_client, region=settings.GCP_Config.DEFAULT_REGION, repository_id=repository_id)\n    return API_Response(message=\"Artifact Registries fetched successfully\", data=artifact_registries, statusCode=200).model_dump()",
        "detail": "api_v1.handlers.sdk.artifactRegistry",
        "documentation": {}
    },
    {
        "label": "set_service_account_artifact_registry",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.artifactRegistry",
        "description": "api_v1.handlers.sdk.artifactRegistry",
        "peekOfCode": "def set_service_account_artifact_registry(repository_id: str, service_account: str, roles: list[str] ,gcp_client = None):\n    if gcp_client is None:\n        gcp_client = GCP_Crds.get_gcp_crds({\"project_id\":settings.GCP_Config.PROJECT_ID,\n                                \"private_key_id\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                \"private_key\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                \"client_email\":settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                            })\n    bindings = ArtifaceRegistry.add_service_account_to_policy(gcp_crds=gcp_client, region=settings.GCP_Config.DEFAULT_REGION, repository_id=repository_id, service_account_email=service_account, roles=roles)\n    return API_Response(message=\"Artifact Registries fetched successfully\", data=bindings, statusCode=200).model_dump()",
        "detail": "api_v1.handlers.sdk.artifactRegistry",
        "documentation": {}
    },
    {
        "label": "list_compute_engines",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.compute",
        "description": "api_v1.handlers.sdk.compute",
        "peekOfCode": "def list_compute_engines(compute_engine_name: str):\n    gcp_client = GCP_Crds.get_gcp_crds({\"project_id\": settings.GCP_Config.PROJECT_ID,\n                                        \"private_key_id\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                        \"private_key\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                        \"client_email\": settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                        \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                                        })\n    if compute_engine_name == \"\" or compute_engine_name == None:\n        compute_engines = Compute.list_compute_engines(\n            gcp_crds=gcp_client, zone=settings.GCP_Config.DEFAULT_ZONE)",
        "detail": "api_v1.handlers.sdk.compute",
        "documentation": {}
    },
    {
        "label": "create_compute_engine",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.compute",
        "description": "api_v1.handlers.sdk.compute",
        "peekOfCode": "def create_compute_engine(details: ComputeEngine_Schema, gcp_client: GCP_Crds.get_gcp_crds = None):\n    try:\n        if gcp_client == None:\n            gcp_client = GCP_Crds.get_gcp_crds({\"project_id\": settings.GCP_Config.PROJECT_ID,\n                                                \"private_key_id\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                                \"private_key\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                                \"client_email\": settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                                \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                                                })\n        compute_client = Compute.get_compute_client(gcp_crds=gcp_client)",
        "detail": "api_v1.handlers.sdk.compute",
        "documentation": {}
    },
    {
        "label": "delete_compute_engine",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.compute",
        "description": "api_v1.handlers.sdk.compute",
        "peekOfCode": "def delete_compute_engine(compute_engine_name: str, gcp_client: GCP_Crds.get_gcp_crds = None):\n    try:\n        if gcp_client == None:\n            gcp_client = GCP_Crds.get_gcp_crds({\"project_id\": settings.GCP_Config.PROJECT_ID,\n                                                \"private_key_id\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                                \"private_key\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                                \"client_email\": settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                                \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                                                })\n        Compute.delete_compute_engine(",
        "detail": "api_v1.handlers.sdk.compute",
        "documentation": {}
    },
    {
        "label": "create_service_account",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.iam",
        "description": "api_v1.handlers.sdk.iam",
        "peekOfCode": "def create_service_account(details: IAM_Role, gcp_client: GCP_Crds.get_gcp_crds = None) -> API_Response:\n    if details.name == \"\" or details.name == None:\n        return API_Response(error=\"Please provide valid role name\", statusCode=400).model_dump()\n    if len(details.name) < 6 and len(details.name) > 30:\n        return API_Response(error=\"Role name should be between 6 and 30 characters length\", statusCode=400).model_dump()\n    if gcp_client is None:\n        gcp_client = GCP_Crds.get_gcp_crds({\"project_id\": settings.GCP_Config.PROJECT_ID,\n                                            \"private_key_id\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                            \"private_key\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                            \"client_email\": settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,",
        "detail": "api_v1.handlers.sdk.iam",
        "documentation": {}
    },
    {
        "label": "update_service_account",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.iam",
        "description": "api_v1.handlers.sdk.iam",
        "peekOfCode": "def update_service_account(details: IAM_Role, action: str, gcp_client: GCP_Crds.get_gcp_crds = None) -> API_Response:\n    try:\n        if gcp_client is None:\n            gcp_client = GCP_Crds.get_gcp_crds({\"project_id\": settings.GCP_Config.PROJECT_ID,\n                                                \"private_key_id\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                                \"private_key\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                                \"client_email\": settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                                \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                                                })\n        if action == \"\" or action == None:",
        "detail": "api_v1.handlers.sdk.iam",
        "documentation": {}
    },
    {
        "label": "list_service_accounts",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.iam",
        "description": "api_v1.handlers.sdk.iam",
        "peekOfCode": "def list_service_accounts(service_account: str):\n    gcp_client = GCP_Crds.get_gcp_crds({\"project_id\": settings.GCP_Config.PROJECT_ID,\n                                        \"private_key_id\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                        \"private_key\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                        \"client_email\": settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                        \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                                        })\n    iam_client = IAM.get_iam_client(gcp_client)\n    if service_account == \"\" or service_account == None:\n        iam_list = IAM.list_service_accounts(",
        "detail": "api_v1.handlers.sdk.iam",
        "documentation": {}
    },
    {
        "label": "get_service_account_key",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.iam",
        "description": "api_v1.handlers.sdk.iam",
        "peekOfCode": "def get_service_account_key(service_account: str, product: str, instanceId: str, gcp_client: GCP_Crds.get_gcp_crds = None):\n    if gcp_client == None:\n        gcp_client = GCP_Crds.get_gcp_crds({\"project_id\": settings.GCP_Config.PROJECT_ID,\n                                            \"private_key_id\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                            \"private_key\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                            \"client_email\": settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                            \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                                            })\n    if product == \"\" and instanceId == \"\":\n        keys = Storage.get_blob_text(",
        "detail": "api_v1.handlers.sdk.iam",
        "documentation": {}
    },
    {
        "label": "delete_service_account",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.iam",
        "description": "api_v1.handlers.sdk.iam",
        "peekOfCode": "def delete_service_account(service_account: str, product: str, instanceId: str, gcp_client: GCP_Crds.get_gcp_crds = None):\n    try:\n        if gcp_client == None:\n            gcp_client = GCP_Crds.get_gcp_crds({\"project_id\": settings.GCP_Config.PROJECT_ID,\n                                                \"private_key_id\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                                \"private_key\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                                \"client_email\": settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                                \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                                                })\n        iam_client = IAM.get_iam_client(gcp_client)",
        "detail": "api_v1.handlers.sdk.iam",
        "documentation": {}
    },
    {
        "label": "create_service_account_key",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.iam",
        "description": "api_v1.handlers.sdk.iam",
        "peekOfCode": "def create_service_account_key(service_account: str, iam_client: Any = None, gcp_client: GCP_Crds.get_gcp_crds = None):\n    if service_account == \"\" or service_account == None:\n        return API_Response(error=ValueError(\"Please provide service account name\"), statusCode=400).model_dump()\n    if gcp_client == None:\n        gcp_client = GCP_Crds.get_gcp_crds({\"project_id\": settings.GCP_Config.PROJECT_ID,\n                                            \"private_key_id\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                            \"private_key\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                            \"client_email\": settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                            \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                                            })",
        "detail": "api_v1.handlers.sdk.iam",
        "documentation": {}
    },
    {
        "label": "get_service_account_permissions",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.iam",
        "description": "api_v1.handlers.sdk.iam",
        "peekOfCode": "def get_service_account_permissions(role_name: str, gcp_client: GCP_Crds.get_gcp_crds = None):\n    if role_name == \"\" or role_name == None:\n        return API_Response(error=ValueError(\"Please provide role name\"), statusCode=400)\n    if gcp_client == None:\n        gcp_client = GCP_Crds.get_gcp_crds({\"project_id\": settings.GCP_Config.PROJECT_ID,\n                                            \"private_key_id\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                            \"private_key\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                            \"client_email\": settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                            \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                                            })",
        "detail": "api_v1.handlers.sdk.iam",
        "documentation": {}
    },
    {
        "label": "create_iam_predefined_roles",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.iam",
        "description": "api_v1.handlers.sdk.iam",
        "peekOfCode": "def create_iam_predefined_roles():\n    gcp_client = GCP_Crds.get_gcp_crds({\"project_id\": settings.GCP_Config.PROJECT_ID,\n                                        \"private_key_id\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                        \"private_key\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                        \"client_email\": settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                        \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                                        })\n    roles = IAM.list_predefined_roles(gcp_client)\n    if len(roles):\n        db = databases.get_mongo_database(db_name=\"gcpMasterData\")",
        "detail": "api_v1.handlers.sdk.iam",
        "documentation": {}
    },
    {
        "label": "get_iam_predefined_roles",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.iam",
        "description": "api_v1.handlers.sdk.iam",
        "peekOfCode": "def get_iam_predefined_roles(filter: str):\n    try:\n        roles = []\n        db = databases.get_mongo_database(db_name=\"gcpMasterData\")\n        if filter == None or filter == \"\":\n            roles = db[\"iam_predefined_roles\"].find()\n        else:\n            roles = db[\"iam_predefined_roles\"].find(\n                {\"$or\": [{\"name\": {\"$regex\": f\".*{filter}.*\"}}, {\"title\": {\"$regex\": f\".*{filter}.*\"}}]})\n        return API_Response(data=roles, statusCode=200, message=\"list of predefined roles from JSON file\").model_dump()",
        "detail": "api_v1.handlers.sdk.iam",
        "documentation": {}
    },
    {
        "label": "upload_blob_from_memory",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.storage",
        "description": "api_v1.handlers.sdk.storage",
        "peekOfCode": "def upload_blob_from_memory(gcp_crds:  GCPSrvAcc.Credentials, content: Any, path: str):\n    Storage.upload_blob_from_memory(gcp_crds, settings.GCP_Config.BUCKET_NAME, content, path)\ndef get_blob_text(gcp_crds:  GCPSrvAcc.Credentials, path: str, bucket: str):\n    return Storage.get_blob(gcp_crds, bucket, path).download_as_text()\ndef create_bucket(gcp_crds:  GCPSrvAcc.Credentials, bucket_name: str):\n    return \ndef delete_blob(gcp_crds:  GCPSrvAcc.Credentials, bucket: str, path: str):\n    return Storage.delete_blob(gcp_crds, bucket, path)",
        "detail": "api_v1.handlers.sdk.storage",
        "documentation": {}
    },
    {
        "label": "get_blob_text",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.storage",
        "description": "api_v1.handlers.sdk.storage",
        "peekOfCode": "def get_blob_text(gcp_crds:  GCPSrvAcc.Credentials, path: str, bucket: str):\n    return Storage.get_blob(gcp_crds, bucket, path).download_as_text()\ndef create_bucket(gcp_crds:  GCPSrvAcc.Credentials, bucket_name: str):\n    return \ndef delete_blob(gcp_crds:  GCPSrvAcc.Credentials, bucket: str, path: str):\n    return Storage.delete_blob(gcp_crds, bucket, path)",
        "detail": "api_v1.handlers.sdk.storage",
        "documentation": {}
    },
    {
        "label": "create_bucket",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.storage",
        "description": "api_v1.handlers.sdk.storage",
        "peekOfCode": "def create_bucket(gcp_crds:  GCPSrvAcc.Credentials, bucket_name: str):\n    return \ndef delete_blob(gcp_crds:  GCPSrvAcc.Credentials, bucket: str, path: str):\n    return Storage.delete_blob(gcp_crds, bucket, path)",
        "detail": "api_v1.handlers.sdk.storage",
        "documentation": {}
    },
    {
        "label": "delete_blob",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.storage",
        "description": "api_v1.handlers.sdk.storage",
        "peekOfCode": "def delete_blob(gcp_crds:  GCPSrvAcc.Credentials, bucket: str, path: str):\n    return Storage.delete_blob(gcp_crds, bucket, path)",
        "detail": "api_v1.handlers.sdk.storage",
        "documentation": {}
    },
    {
        "label": "list_vpcs",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.vpc",
        "description": "api_v1.handlers.sdk.vpc",
        "peekOfCode": "def list_vpcs(vpc_name: str, gcp_client: GCP_Crds.get_gcp_crds = None):\n    if gcp_client == None:\n        print(\"GCP Creds 1234567890000: \",  settings.GCP_Config.PROJECT_ID, settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n              settings.GCP_Config.SRV_ACC_PRIVATE_KEY, settings.GCP_Config.SRV_ACC_CLIENT_EMAIL, settings.GCP_Config.TOKEN_URL)\n        gcp_client = GCP_Crds.get_gcp_crds({\"project_id\": settings.GCP_Config.PROJECT_ID,\n                                            \"private_key_id\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                            \"private_key\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                            \"client_email\": settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                            \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                                            })",
        "detail": "api_v1.handlers.sdk.vpc",
        "documentation": {}
    },
    {
        "label": "create_vpc_subnetwork_firewall",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.vpc",
        "description": "api_v1.handlers.sdk.vpc",
        "peekOfCode": "def create_vpc_subnetwork_firewall(details: VPC_Schema, gcp_client: GCP_Crds.get_gcp_crds = None):\n    if gcp_client == None:\n        gcp_client = GCP_Crds.get_gcp_crds({\"project_id\": settings.GCP_Config.PROJECT_ID,\n                                            \"private_key_id\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                            \"private_key\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                            \"client_email\": settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                            \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                                            })\n    vpc_client = VPC.get_vpc_client(gcp_crds=gcp_client)\n    if not VPC.check_vpc_exists(gcp_crds=gcp_client, vpc_name=details.name, vpc_client=vpc_client):",
        "detail": "api_v1.handlers.sdk.vpc",
        "documentation": {}
    },
    {
        "label": "create_firewall",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.vpc",
        "description": "api_v1.handlers.sdk.vpc",
        "peekOfCode": "def create_firewall(firewall_rules: list[Firewall_Schema], gcp_client: GCPSrvAcc.Credentials = None, vpc_client: Any = None):\n    result = []\n    if gcp_client == None:\n        gcp_client = GCP_Crds.get_gcp_crds({\"project_id\": settings.GCP_Config.PROJECT_ID,\n                                            \"private_key_id\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                            \"private_key\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                            \"client_email\": settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                            \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                                            })\n    for firewall in firewall_rules:",
        "detail": "api_v1.handlers.sdk.vpc",
        "documentation": {}
    },
    {
        "label": "create_subnetwork",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.vpc",
        "description": "api_v1.handlers.sdk.vpc",
        "peekOfCode": "def create_subnetwork(details: SubNetwork_Schema, gcp_client: GCPSrvAcc.Credentials = None, vpc_client: Any = None):\n    if gcp_client == None:\n        gcp_client = GCP_Crds.get_gcp_crds({\"project_id\": settings.GCP_Config.PROJECT_ID,\n                                            \"private_key_id\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                            \"private_key\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                            \"client_email\": settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                            \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                                            })\n    details_json = jsonable_encoder(details)\n    if VPC.check_subnetwork_exists(gcp_crds=gcp_client, subnetwork_name=details_json[\"name\"], vpc_client=vpc_client):",
        "detail": "api_v1.handlers.sdk.vpc",
        "documentation": {}
    },
    {
        "label": "create_vpc",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.vpc",
        "description": "api_v1.handlers.sdk.vpc",
        "peekOfCode": "def create_vpc(details: VPC_Schema, gcp_client: GCPSrvAcc.Credentials = None, vpc_client: Any = None):\n    if gcp_client == None:\n        gcp_client = GCP_Crds.get_gcp_crds({\"project_id\": settings.GCP_Config.PROJECT_ID,\n                                            \"private_key_id\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                            \"private_key\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                            \"client_email\": settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                            \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                                            })\n    details_json = {\n        \"name\": details.name,",
        "detail": "api_v1.handlers.sdk.vpc",
        "documentation": {}
    },
    {
        "label": "delete_vpc",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.vpc",
        "description": "api_v1.handlers.sdk.vpc",
        "peekOfCode": "def delete_vpc(vpc_name: str, gcp_client: GCP_Crds.get_gcp_crds = None):\n    try:\n        if gcp_client == None:\n            gcp_client = GCP_Crds.get_gcp_crds({\"project_id\": settings.GCP_Config.PROJECT_ID,\n                                                \"private_key_id\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                                \"private_key\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                                \"client_email\": settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                                \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                                                })\n        vpc_client = VPC.get_vpc_client(gcp_crds=gcp_client)",
        "detail": "api_v1.handlers.sdk.vpc",
        "documentation": {}
    },
    {
        "label": "get_sample_firewalls",
        "kind": 2,
        "importPath": "api_v1.handlers.sdk.vpc",
        "description": "api_v1.handlers.sdk.vpc",
        "peekOfCode": "def get_sample_firewalls(vpc_name: str, vpc_target_link: str, subnetwork_ip: str, ports: list):\n    all_ports = [\"22\", \"80\", \"443\", \"3000\"] + ports\n    return [\n        {\n            \"name\": f\"{vpc_name}-allow-ssh\",\n            \"direction\": \"INGRESS\",\n            \"priority\": 65534,\n            \"network\": vpc_target_link,\n            \"sourceRanges\": [\"0.0.0.0/0\"],\n            \"allowed\": [",
        "detail": "api_v1.handlers.sdk.vpc",
        "documentation": {}
    },
    {
        "label": "create_instance_compute_engine",
        "kind": 2,
        "importPath": "api_v1.handlers.instances",
        "description": "api_v1.handlers.instances",
        "peekOfCode": "def create_instance_compute_engine(details: Instance, product: dict):\n    instanceId = random.choice(string.ascii_lowercase) + ''.join(\n        random.choice(string.ascii_lowercase + string.digits) for _ in range(5))\n    gcp_client = GCP_Crds.get_gcp_crds({\"project_id\": settings.GCP_Config.PROJECT_ID,\n                                        \"private_key_id\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                        \"private_key\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                        \"client_email\": settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                        \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                                        })\n    iam = None",
        "detail": "api_v1.handlers.instances",
        "documentation": {}
    },
    {
        "label": "delete_instance_compute_engine",
        "kind": 2,
        "importPath": "api_v1.handlers.instances",
        "description": "api_v1.handlers.instances",
        "peekOfCode": "def delete_instance_compute_engine(instanceId: str, product: str, name: str, gcp_client: GCP_Crds.get_gcp_crds = None):\n    if gcp_client == None:\n        gcp_client = GCP_Crds.get_gcp_crds({\"project_id\": settings.GCP_Config.PROJECT_ID,\n                                            \"private_key_id\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                            \"private_key\": settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                            \"client_email\": settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                            \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                                            })\n    try:\n        Compute.delete_compute_engine(",
        "detail": "api_v1.handlers.instances",
        "documentation": {}
    },
    {
        "label": "api_router",
        "kind": 5,
        "importPath": "api_v1.api",
        "description": "api_v1.api",
        "peekOfCode": "api_router = APIRouter()\napi_router.include_router(iam.router, tags=[\"iam\"])\napi_router.include_router(vpc.router, tags=[\"vpc\"])\napi_router.include_router(compute.router, tags=[\"compute\"])\napi_router.include_router(artifactRegistry.router, tags=[\"artifactRegistry\"])\napi_router.include_router(instances.router, tags=[\"instances\"])",
        "detail": "api_v1.api",
        "documentation": {}
    },
    {
        "label": "get_artifact_registry_client",
        "kind": 2,
        "importPath": "cloudProviders.gcp.artifactRegistry",
        "description": "cloudProviders.gcp.artifactRegistry",
        "peekOfCode": "def get_artifact_registry_client(gcp_crds):\n    return build(serviceName=\"artifactregistry\", version=\"v1\", credentials=gcp_crds)\ndef list_artifact_repositories(gcp_crds: GCPSrvAcc.Credentials,region: str, artifact_registry_client: Any = None):\n    if artifact_registry_client is None:\n        artifact_registry_client = get_artifact_registry_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    artifact_registry = artifact_registry_client.projects().locations().repositories().list(parent=f\"projects/{project_id}/locations/{region}\").execute()\n    return artifact_registry\ndef get_artifact_registry_permissions(gcp_crds: GCPSrvAcc.Credentials, region: str, repository_id: str, artifact_registry_client: Any = None):\n    if artifact_registry_client is None:",
        "detail": "cloudProviders.gcp.artifactRegistry",
        "documentation": {}
    },
    {
        "label": "list_artifact_repositories",
        "kind": 2,
        "importPath": "cloudProviders.gcp.artifactRegistry",
        "description": "cloudProviders.gcp.artifactRegistry",
        "peekOfCode": "def list_artifact_repositories(gcp_crds: GCPSrvAcc.Credentials,region: str, artifact_registry_client: Any = None):\n    if artifact_registry_client is None:\n        artifact_registry_client = get_artifact_registry_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    artifact_registry = artifact_registry_client.projects().locations().repositories().list(parent=f\"projects/{project_id}/locations/{region}\").execute()\n    return artifact_registry\ndef get_artifact_registry_permissions(gcp_crds: GCPSrvAcc.Credentials, region: str, repository_id: str, artifact_registry_client: Any = None):\n    if artifact_registry_client is None:\n        artifact_registry_client = get_artifact_registry_client(gcp_crds)\n    project_id = gcp_crds.project_id",
        "detail": "cloudProviders.gcp.artifactRegistry",
        "documentation": {}
    },
    {
        "label": "get_artifact_registry_permissions",
        "kind": 2,
        "importPath": "cloudProviders.gcp.artifactRegistry",
        "description": "cloudProviders.gcp.artifactRegistry",
        "peekOfCode": "def get_artifact_registry_permissions(gcp_crds: GCPSrvAcc.Credentials, region: str, repository_id: str, artifact_registry_client: Any = None):\n    if artifact_registry_client is None:\n        artifact_registry_client = get_artifact_registry_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    artifact_registry = artifact_registry_client.projects().locations().repositories().getIamPolicy(\n        resource=f\"projects/{project_id}/locations/{region}/repositories/{repository_id}\").execute()\n    return artifact_registry\ndef add_service_account_to_policy(gcp_crds: GCPSrvAcc.Credentials, region: str, repository_id: str, service_account_email: str, roles: list[str]):\n    artifact_registry_client = get_artifact_registry_client(gcp_crds)\n    project_id = gcp_crds.project_id",
        "detail": "cloudProviders.gcp.artifactRegistry",
        "documentation": {}
    },
    {
        "label": "add_service_account_to_policy",
        "kind": 2,
        "importPath": "cloudProviders.gcp.artifactRegistry",
        "description": "cloudProviders.gcp.artifactRegistry",
        "peekOfCode": "def add_service_account_to_policy(gcp_crds: GCPSrvAcc.Credentials, region: str, repository_id: str, service_account_email: str, roles: list[str]):\n    artifact_registry_client = get_artifact_registry_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    # Get the current IAM policy\n    current_policy = get_artifact_registry_permissions(gcp_crds, region, repository_id, artifact_registry_client)\n    # Add the new service account to the IAM policy\n    for role in roles:\n        if 'bindings' not in current_policy:\n            current_policy['bindings'] = []\n        current_policy['bindings'].append({'role': role, 'members': [f'serviceAccount:{service_account_email}']})",
        "detail": "cloudProviders.gcp.artifactRegistry",
        "documentation": {}
    },
    {
        "label": "get_compute_client",
        "kind": 2,
        "importPath": "cloudProviders.gcp.compute",
        "description": "cloudProviders.gcp.compute",
        "peekOfCode": "def get_compute_client(gcp_crds):\n    return build(serviceName=\"compute\", version=\"v1\", credentials=gcp_crds)\ndef list_compute_engines(gcp_crds: GCPSrvAcc.Credentials, zone: str, compute_client: Any = None):\n    if compute_client is None:\n        compute_client = get_compute_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    compute = compute_client.instances().list(\n        project=project_id, zone=zone).execute()\n    return compute\ndef get_compute_engine(gcp_crds: GCPSrvAcc.Credentials, compute_engine_name: str, zone: str, compute_client: Any = None):",
        "detail": "cloudProviders.gcp.compute",
        "documentation": {}
    },
    {
        "label": "list_compute_engines",
        "kind": 2,
        "importPath": "cloudProviders.gcp.compute",
        "description": "cloudProviders.gcp.compute",
        "peekOfCode": "def list_compute_engines(gcp_crds: GCPSrvAcc.Credentials, zone: str, compute_client: Any = None):\n    if compute_client is None:\n        compute_client = get_compute_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    compute = compute_client.instances().list(\n        project=project_id, zone=zone).execute()\n    return compute\ndef get_compute_engine(gcp_crds: GCPSrvAcc.Credentials, compute_engine_name: str, zone: str, compute_client: Any = None):\n    if compute_client is None:\n        compute_client = get_compute_client(gcp_crds)",
        "detail": "cloudProviders.gcp.compute",
        "documentation": {}
    },
    {
        "label": "get_compute_engine",
        "kind": 2,
        "importPath": "cloudProviders.gcp.compute",
        "description": "cloudProviders.gcp.compute",
        "peekOfCode": "def get_compute_engine(gcp_crds: GCPSrvAcc.Credentials, compute_engine_name: str, zone: str, compute_client: Any = None):\n    if compute_client is None:\n        compute_client = get_compute_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    try:\n        compute = compute_client.instances().get(\n            project=project_id, instance=compute_engine_name, zone=zone).execute()\n    except:\n        compute = None\n    return compute",
        "detail": "cloudProviders.gcp.compute",
        "documentation": {}
    },
    {
        "label": "create_compute_engine",
        "kind": 2,
        "importPath": "cloudProviders.gcp.compute",
        "description": "cloudProviders.gcp.compute",
        "peekOfCode": "def create_compute_engine(gcp_crds: GCPSrvAcc.Credentials, details: Any, compute_client: Any = None):\n    if compute_client is None:\n        compute_client = get_compute_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    compute = compute_client.instances().insert(\n        project=project_id, zone=details[\"zone\"], body=details).execute()\n    return compute\ndef get_latest_debian_compute_image(gcp_crds: GCPSrvAcc.Credentials, compute_client: Any = None):\n    if compute_client is None:\n        compute_client = get_compute_client(gcp_crds)",
        "detail": "cloudProviders.gcp.compute",
        "documentation": {}
    },
    {
        "label": "get_latest_debian_compute_image",
        "kind": 2,
        "importPath": "cloudProviders.gcp.compute",
        "description": "cloudProviders.gcp.compute",
        "peekOfCode": "def get_latest_debian_compute_image(gcp_crds: GCPSrvAcc.Credentials, compute_client: Any = None):\n    if compute_client is None:\n        compute_client = get_compute_client(gcp_crds)\n    image = compute_client.images().getFromFamily(\n        project=\"debian-cloud\", family=\"debian-11\").execute()\n    return image.get(\"selfLink\")\ndef delete_compute_engine(gcp_crds: GCPSrvAcc.Credentials, compute_engine_name: str, zone: str, compute_client: Any = None):\n    if compute_client is None:\n        compute_client = get_compute_client(gcp_crds)\n    project_id = gcp_crds.project_id",
        "detail": "cloudProviders.gcp.compute",
        "documentation": {}
    },
    {
        "label": "delete_compute_engine",
        "kind": 2,
        "importPath": "cloudProviders.gcp.compute",
        "description": "cloudProviders.gcp.compute",
        "peekOfCode": "def delete_compute_engine(gcp_crds: GCPSrvAcc.Credentials, compute_engine_name: str, zone: str, compute_client: Any = None):\n    if compute_client is None:\n        compute_client = get_compute_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    compute = compute_client.instances().delete(project=project_id, zone=zone,\n                                                instance=compute_engine_name).execute()\n    return compute",
        "detail": "cloudProviders.gcp.compute",
        "documentation": {}
    },
    {
        "label": "get_gcp_crds",
        "kind": 2,
        "importPath": "cloudProviders.gcp.credentials",
        "description": "cloudProviders.gcp.credentials",
        "peekOfCode": "def get_gcp_crds(crds: dict):\n    print(\"crds private key: \", crds[\"private_key\"])\n    crds = {\n        \"type\": \"service_account\",\n        \"project_id\": \"console-424205\",\n        \"private_key_id\": \"84c6cd36101a188c42648801b5cd476794d51613\",\n        \"private_key\": crds[\"private_key\"],\n        \"client_email\": \"console-automation@console-424205.iam.gserviceaccount.com\",\n        \"client_id\": \"107868089407702649699\",\n        \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",",
        "detail": "cloudProviders.gcp.credentials",
        "documentation": {}
    },
    {
        "label": "get_iam_client",
        "kind": 2,
        "importPath": "cloudProviders.gcp.iam",
        "description": "cloudProviders.gcp.iam",
        "peekOfCode": "def get_iam_client(gcp_crds):\n    return build(serviceName=\"iam\", version=\"v1\", credentials=gcp_crds)\ndef get_resource_manager(gcp_crds: GCPSrvAcc.Credentials):\n    return build(\"cloudresourcemanager\", \"v1\", credentials=gcp_crds)\ndef create_service_account(gcp_crds: GCPSrvAcc.Credentials, details: dict, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    service_account = iam_client.projects().serviceAccounts().create(\n        # name=\"projects/{}/serviceAccounts/\".format(gcp_crds.project_id), ",
        "detail": "cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "get_resource_manager",
        "kind": 2,
        "importPath": "cloudProviders.gcp.iam",
        "description": "cloudProviders.gcp.iam",
        "peekOfCode": "def get_resource_manager(gcp_crds: GCPSrvAcc.Credentials):\n    return build(\"cloudresourcemanager\", \"v1\", credentials=gcp_crds)\ndef create_service_account(gcp_crds: GCPSrvAcc.Credentials, details: dict, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    service_account = iam_client.projects().serviceAccounts().create(\n        # name=\"projects/{}/serviceAccounts/\".format(gcp_crds.project_id), \n        name=f\"projects/{project_id}\",\n        body={\"accountId\": details[\"name\"], \"serviceAccount\": {",
        "detail": "cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "create_service_account",
        "kind": 2,
        "importPath": "cloudProviders.gcp.iam",
        "description": "cloudProviders.gcp.iam",
        "peekOfCode": "def create_service_account(gcp_crds: GCPSrvAcc.Credentials, details: dict, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    service_account = iam_client.projects().serviceAccounts().create(\n        # name=\"projects/{}/serviceAccounts/\".format(gcp_crds.project_id), \n        name=f\"projects/{project_id}\",\n        body={\"accountId\": details[\"name\"], \"serviceAccount\": {\n                        \"displayName\": details[\"name\"],\n                        \"description\": details[\"description\"]}}",
        "detail": "cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "rename_service_account",
        "kind": 2,
        "importPath": "cloudProviders.gcp.iam",
        "description": "cloudProviders.gcp.iam",
        "peekOfCode": "def rename_service_account(gcp_crds: GCPSrvAcc.Credentials, details: dict, iam: Any, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    iam[\"displayName\"] = details[\"name\"]\n    iam[\"description\"] = details[\"description\"]\n    service_account = iam_client.projects().serviceAccounts().update(\n        name=f\"projects/-/serviceAccounts/{iam['email']}\",\n        body=iam\n    ).execute()\n    return service_account",
        "detail": "cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "disable_service_account",
        "kind": 2,
        "importPath": "cloudProviders.gcp.iam",
        "description": "cloudProviders.gcp.iam",
        "peekOfCode": "def disable_service_account(gcp_crds: GCPSrvAcc.Credentials, service_account: str, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    service_account = iam_client.projects().serviceAccounts().disable(\n        name=f\"projects/-/serviceAccounts/{service_account}\"\n    ).execute()\ndef enable_service_account(gcp_crds: GCPSrvAcc.Credentials, service_account: str, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    service_account = iam_client.projects().serviceAccounts().enable(",
        "detail": "cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "enable_service_account",
        "kind": 2,
        "importPath": "cloudProviders.gcp.iam",
        "description": "cloudProviders.gcp.iam",
        "peekOfCode": "def enable_service_account(gcp_crds: GCPSrvAcc.Credentials, service_account: str, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    service_account = iam_client.projects().serviceAccounts().enable(\n        name=f\"projects/-/serviceAccounts/{service_account}\"\n    ).execute()\ndef delete_service_account(gcp_crds: GCPSrvAcc.Credentials, service_account: str, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    iam_client.projects().serviceAccounts().delete(",
        "detail": "cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "delete_service_account",
        "kind": 2,
        "importPath": "cloudProviders.gcp.iam",
        "description": "cloudProviders.gcp.iam",
        "peekOfCode": "def delete_service_account(gcp_crds: GCPSrvAcc.Credentials, service_account: str, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    iam_client.projects().serviceAccounts().delete(\n        name=f\"projects/-/serviceAccounts/{service_account}\"\n    ).execute()\ndef list_service_accounts(gcp_crds: GCPSrvAcc.Credentials, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    project_id = gcp_crds.project_id",
        "detail": "cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "list_service_accounts",
        "kind": 2,
        "importPath": "cloudProviders.gcp.iam",
        "description": "cloudProviders.gcp.iam",
        "peekOfCode": "def list_service_accounts(gcp_crds: GCPSrvAcc.Credentials, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    service_accounts = iam_client.projects().serviceAccounts().list(\n        name=f\"projects/{project_id}\"\n    ).execute()\n    return service_accounts\ndef get_service_account(gcp_crds: GCPSrvAcc.Credentials, details: dict, iam_client: Any = None):\n    if iam_client is None:",
        "detail": "cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "get_service_account",
        "kind": 2,
        "importPath": "cloudProviders.gcp.iam",
        "description": "cloudProviders.gcp.iam",
        "peekOfCode": "def get_service_account(gcp_crds: GCPSrvAcc.Credentials, details: dict, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    email = \"\"\n    if not details.get(\"email\") or details[\"email\"] == \"\":\n        email = f\"{details['name']}@{gcp_crds.project_id}.iam.gserviceaccount.com\"\n    else:\n        email = details[\"email\"]\n    try:\n        account = iam_client.projects().serviceAccounts().get(",
        "detail": "cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "check_service_account_exists",
        "kind": 2,
        "importPath": "cloudProviders.gcp.iam",
        "description": "cloudProviders.gcp.iam",
        "peekOfCode": "def check_service_account_exists(gcp_crds: GCPSrvAcc.Credentials, details: dict, iam_client: Any = None):\n    service_account = get_service_account(gcp_crds=gcp_crds, details=details, iam_client =iam_client)\n    if service_account is None:\n        return False\n    return True\ndef get_service_account_policy(gcp_crds: GCPSrvAcc.Credentials, service_account: str, version: int = 1):\n    resource_manager = get_resource_manager(gcp_crds=gcp_crds)\n    policy = list_policies_project(gcp_crds=gcp_crds, resource_manager=resource_manager, version=version)\n    polices = []\n    for role in policy[\"bindings\"]:",
        "detail": "cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "get_service_account_policy",
        "kind": 2,
        "importPath": "cloudProviders.gcp.iam",
        "description": "cloudProviders.gcp.iam",
        "peekOfCode": "def get_service_account_policy(gcp_crds: GCPSrvAcc.Credentials, service_account: str, version: int = 1):\n    resource_manager = get_resource_manager(gcp_crds=gcp_crds)\n    policy = list_policies_project(gcp_crds=gcp_crds, resource_manager=resource_manager, version=version)\n    polices = []\n    for role in policy[\"bindings\"]:\n        for member in role[\"members\"]:\n            if member == f\"serviceAccount:{service_account}\":\n                polices.append(role[\"role\"])\n    return polices\ndef list_predefined_roles(gcp_crds: GCPSrvAcc.Credentials):",
        "detail": "cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "list_predefined_roles",
        "kind": 2,
        "importPath": "cloudProviders.gcp.iam",
        "description": "cloudProviders.gcp.iam",
        "peekOfCode": "def list_predefined_roles(gcp_crds: GCPSrvAcc.Credentials):\n    iam = get_iam_client(gcp_crds=gcp_crds)\n    roles = []\n    nextToken = \"\"\n    while True:\n        if nextToken == \"\":\n            response = iam.roles().list().execute()\n        else:\n            response = iam.roles().list(pageToken=nextToken).execute()\n        nextToken = response.get(\"nextPageToken\")",
        "detail": "cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "list_policies_project",
        "kind": 2,
        "importPath": "cloudProviders.gcp.iam",
        "description": "cloudProviders.gcp.iam",
        "peekOfCode": "def list_policies_project(gcp_crds: GCPSrvAcc.Credentials, version: int = 3, resource_manager: Any = None):\n    if resource_manager is None:\n        resource_manager = get_resource_manager(gcp_crds=gcp_crds)\n    policy = resource_manager.projects().getIamPolicy(\n        resource = gcp_crds.project_id,\n        body = {\"options\": {\"requestedPolicyVersion\": version}}\n    ).execute()\n    return policy\ndef set_service_account_policy(gcp_crds: GCPSrvAcc.Credentials, service_account: str, roles: list, resource_manager: Any = None):\n    if not len(roles):",
        "detail": "cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "set_service_account_policy",
        "kind": 2,
        "importPath": "cloudProviders.gcp.iam",
        "description": "cloudProviders.gcp.iam",
        "peekOfCode": "def set_service_account_policy(gcp_crds: GCPSrvAcc.Credentials, service_account: str, roles: list, resource_manager: Any = None):\n    if not len(roles):\n        return\n    if resource_manager is None:\n        resource_manager = get_resource_manager(gcp_crds=gcp_crds)\n    policies = list_policies_project(gcp_crds=gcp_crds)\n    if policies.get(\"bindings\") is None:\n        policies[\"bindings\"] = []\n    for role in roles:\n        policies[\"bindings\"].append({",
        "detail": "cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "delete_service_account_policy",
        "kind": 2,
        "importPath": "cloudProviders.gcp.iam",
        "description": "cloudProviders.gcp.iam",
        "peekOfCode": "def delete_service_account_policy(gcp_crds: GCPSrvAcc.Credentials, service_account: str, roles: list, resource_manager: Any = None):\n    if not len(roles):\n        return\n    if resource_manager is None:\n        resource_manager = get_resource_manager(gcp_crds=gcp_crds)\n    policies = list_policies_project(gcp_crds=gcp_crds)\n    for role in roles:\n        for binding in policies[\"bindings\"]:\n            if binding[\"role\"] == role:\n                for member in binding[\"members\"]:",
        "detail": "cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "update_service_account_policy",
        "kind": 2,
        "importPath": "cloudProviders.gcp.iam",
        "description": "cloudProviders.gcp.iam",
        "peekOfCode": "def update_service_account_policy(gcp_crds: GCPSrvAcc.Credentials, service_account: str, deleted_roles: list[str], added_roles: list[str], resource_manager: Any = None):\n    if not len(deleted_roles) and not len(added_roles):\n        return\n    if resource_manager is None:\n        resource_manager = get_resource_manager(gcp_crds=gcp_crds)\n    policies = list_policies_project(gcp_crds=gcp_crds)\n    if policies.get(\"bindings\") is None:\n        policies[\"bindings\"] = []\n    if len(added_roles):\n        count = len(added_roles)",
        "detail": "cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "create_service_account_key",
        "kind": 2,
        "importPath": "cloudProviders.gcp.iam",
        "description": "cloudProviders.gcp.iam",
        "peekOfCode": "def create_service_account_key(gcp_crds: GCPSrvAcc.Credentials, service_account: str, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds=gcp_crds)\n    key = iam_client.projects().serviceAccounts().keys().create(\n        name=f\"projects/-/serviceAccounts/{service_account}\"\n        ).execute()\n    return key",
        "detail": "cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "get_storage_client",
        "kind": 2,
        "importPath": "cloudProviders.gcp.storage",
        "description": "cloudProviders.gcp.storage",
        "peekOfCode": "def get_storage_client(gcp_crds):\n    return storage.Client(credentials=gcp_crds)\ndef upload_blob(gcp_crds: GCPSrvAcc.Credentials, bucket: str, source_file_name: str, destination_file_name: str):\n    bucket = get_storage_client(gcp_crds).bucket(bucket)\n    blob = bucket.blob(destination_file_name)\n    generation_match_precondition = 0\n    blob.upload_from_filename(\n        source_file_name, if_generation_match=generation_match_precondition)\ndef upload_blob_from_memory(gcp_crds: GCPSrvAcc.Credentials, bucket: str, content: Any, destination_file_name: str):\n    body = content",
        "detail": "cloudProviders.gcp.storage",
        "documentation": {}
    },
    {
        "label": "upload_blob",
        "kind": 2,
        "importPath": "cloudProviders.gcp.storage",
        "description": "cloudProviders.gcp.storage",
        "peekOfCode": "def upload_blob(gcp_crds: GCPSrvAcc.Credentials, bucket: str, source_file_name: str, destination_file_name: str):\n    bucket = get_storage_client(gcp_crds).bucket(bucket)\n    blob = bucket.blob(destination_file_name)\n    generation_match_precondition = 0\n    blob.upload_from_filename(\n        source_file_name, if_generation_match=generation_match_precondition)\ndef upload_blob_from_memory(gcp_crds: GCPSrvAcc.Credentials, bucket: str, content: Any, destination_file_name: str):\n    body = content\n    if type(content) == dict:\n        body = json.dumps(content).encode('utf-8')",
        "detail": "cloudProviders.gcp.storage",
        "documentation": {}
    },
    {
        "label": "upload_blob_from_memory",
        "kind": 2,
        "importPath": "cloudProviders.gcp.storage",
        "description": "cloudProviders.gcp.storage",
        "peekOfCode": "def upload_blob_from_memory(gcp_crds: GCPSrvAcc.Credentials, bucket: str, content: Any, destination_file_name: str):\n    body = content\n    if type(content) == dict:\n        body = json.dumps(content).encode('utf-8')\n    bucket = get_storage_client(gcp_crds).bucket(bucket)\n    blob = bucket.blob(destination_file_name)\n    blob.upload_from_string(body)\ndef get_blob(gcp_crds: GCPSrvAcc.Credentials, bucket: str, blob_name: str):\n    bucket = get_storage_client(gcp_crds).bucket(bucket)\n    blob = bucket.blob(blob_name)",
        "detail": "cloudProviders.gcp.storage",
        "documentation": {}
    },
    {
        "label": "get_blob",
        "kind": 2,
        "importPath": "cloudProviders.gcp.storage",
        "description": "cloudProviders.gcp.storage",
        "peekOfCode": "def get_blob(gcp_crds: GCPSrvAcc.Credentials, bucket: str, blob_name: str):\n    bucket = get_storage_client(gcp_crds).bucket(bucket)\n    blob = bucket.blob(blob_name)\n    return blob\ndef create_bucket(gcp_crds: GCPSrvAcc.Credentials, input: dict):\n    client = get_storage_client(gcp_crds)\n    bucket = client.bucket(input.get(\"bucket_name\"))\n    bucket.iam_configuration.uniform_bucket_level_access_enabled = input.get(\n        \"uniform_bucket_level_access\")\n    bucket.storage_class = input.get(\"storage_class\")",
        "detail": "cloudProviders.gcp.storage",
        "documentation": {}
    },
    {
        "label": "create_bucket",
        "kind": 2,
        "importPath": "cloudProviders.gcp.storage",
        "description": "cloudProviders.gcp.storage",
        "peekOfCode": "def create_bucket(gcp_crds: GCPSrvAcc.Credentials, input: dict):\n    client = get_storage_client(gcp_crds)\n    bucket = client.bucket(input.get(\"bucket_name\"))\n    bucket.iam_configuration.uniform_bucket_level_access_enabled = input.get(\n        \"uniform_bucket_level_access\")\n    bucket.storage_class = input.get(\"storage_class\")\n    bucket.versioning_enabled = input.get(\"versioning\")\n    bucket = client.create_bucket(bucket)\n    lifecycle_rules = input.get(\"lifecycle_rules\", [])\n    for rule in lifecycle_rules:",
        "detail": "cloudProviders.gcp.storage",
        "documentation": {}
    },
    {
        "label": "delete_blob",
        "kind": 2,
        "importPath": "cloudProviders.gcp.storage",
        "description": "cloudProviders.gcp.storage",
        "peekOfCode": "def delete_blob(gcp_crds: GCPSrvAcc.Credentials, bucket: str, path: str):\n    bucket = get_storage_client(gcp_crds).bucket(bucket)\n    blob = bucket.blob(path)\n    blob.delete()\n    return blob",
        "detail": "cloudProviders.gcp.storage",
        "documentation": {}
    },
    {
        "label": "get_vpc_client",
        "kind": 2,
        "importPath": "cloudProviders.gcp.vpc",
        "description": "cloudProviders.gcp.vpc",
        "peekOfCode": "def get_vpc_client(gcp_crds):\n    return build(serviceName=\"compute\", version=\"v1\", credentials=gcp_crds)\ndef list_vpcs(gcp_crds: GCPSrvAcc.Credentials, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    vpc = vpc_client.networks().list(project=project_id,).execute()\n    return vpc\ndef get_vpc(gcp_crds: GCPSrvAcc.Credentials, vpc_name: str, vpc_client: Any = None):\n    if vpc_client is None:",
        "detail": "cloudProviders.gcp.vpc",
        "documentation": {}
    },
    {
        "label": "list_vpcs",
        "kind": 2,
        "importPath": "cloudProviders.gcp.vpc",
        "description": "cloudProviders.gcp.vpc",
        "peekOfCode": "def list_vpcs(gcp_crds: GCPSrvAcc.Credentials, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    vpc = vpc_client.networks().list(project=project_id,).execute()\n    return vpc\ndef get_vpc(gcp_crds: GCPSrvAcc.Credentials, vpc_name: str, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    project_id = gcp_crds.project_id",
        "detail": "cloudProviders.gcp.vpc",
        "documentation": {}
    },
    {
        "label": "get_vpc",
        "kind": 2,
        "importPath": "cloudProviders.gcp.vpc",
        "description": "cloudProviders.gcp.vpc",
        "peekOfCode": "def get_vpc(gcp_crds: GCPSrvAcc.Credentials, vpc_name: str, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    try:\n        vpc = vpc_client.networks().get(project=project_id, network=vpc_name).execute()\n    except:\n        vpc = None\n    print(\"vpccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\")\n    return vpc",
        "detail": "cloudProviders.gcp.vpc",
        "documentation": {}
    },
    {
        "label": "check_vpc_exists",
        "kind": 2,
        "importPath": "cloudProviders.gcp.vpc",
        "description": "cloudProviders.gcp.vpc",
        "peekOfCode": "def check_vpc_exists(gcp_crds: GCPSrvAcc.Credentials, vpc_name: str, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    if get_vpc(gcp_crds, vpc_name, vpc_client) is None:\n        return False\n    return True\ndef create_vpc(gcp_crds: GCPSrvAcc.Credentials, details: dict, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    project_id = gcp_crds.project_id",
        "detail": "cloudProviders.gcp.vpc",
        "documentation": {}
    },
    {
        "label": "create_vpc",
        "kind": 2,
        "importPath": "cloudProviders.gcp.vpc",
        "description": "cloudProviders.gcp.vpc",
        "peekOfCode": "def create_vpc(gcp_crds: GCPSrvAcc.Credentials, details: dict, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    vpc = vpc_client.networks().insert(project=project_id, body=details).execute()\n    time.sleep(30)\n    return vpc\ndef create_subnetwork(gcp_crds: GCPSrvAcc.Credentials, details: dict, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)   ",
        "detail": "cloudProviders.gcp.vpc",
        "documentation": {}
    },
    {
        "label": "create_subnetwork",
        "kind": 2,
        "importPath": "cloudProviders.gcp.vpc",
        "description": "cloudProviders.gcp.vpc",
        "peekOfCode": "def create_subnetwork(gcp_crds: GCPSrvAcc.Credentials, details: dict, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)   \n    response = vpc_client.subnetworks().insert(project=gcp_crds.project_id, region=details[\"region\"], body=details).execute()\n    time.sleep(10)\n    return response\ndef get_subnetwork(gcp_crds: GCPSrvAcc.Credentials,subnetwork_name: str ,vpc_client: Any= None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    project_id = gcp_crds.project_id",
        "detail": "cloudProviders.gcp.vpc",
        "documentation": {}
    },
    {
        "label": "get_subnetwork",
        "kind": 2,
        "importPath": "cloudProviders.gcp.vpc",
        "description": "cloudProviders.gcp.vpc",
        "peekOfCode": "def get_subnetwork(gcp_crds: GCPSrvAcc.Credentials,subnetwork_name: str ,vpc_client: Any= None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    try:\n        subnetwork = vpc_client.subnetworks().get(project=project_id, subnetwork=subnetwork_name).execute()\n    except: \n        subnetwork = None\n    return subnetwork\ndef list_subnetworks(gcp_crds: GCPSrvAcc.Credentials, vpc_client: Any = None):",
        "detail": "cloudProviders.gcp.vpc",
        "documentation": {}
    },
    {
        "label": "list_subnetworks",
        "kind": 2,
        "importPath": "cloudProviders.gcp.vpc",
        "description": "cloudProviders.gcp.vpc",
        "peekOfCode": "def list_subnetworks(gcp_crds: GCPSrvAcc.Credentials, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    subnetworks = vpc_client.subnetworks().list(project=project_id).execute()\n    return subnetworks\ndef list_vpc_subnetworks(gcp_crds: GCPSrvAcc.Credentials, vpc_target_link: str, region: str, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    project_id = gcp_crds.project_id",
        "detail": "cloudProviders.gcp.vpc",
        "documentation": {}
    },
    {
        "label": "list_vpc_subnetworks",
        "kind": 2,
        "importPath": "cloudProviders.gcp.vpc",
        "description": "cloudProviders.gcp.vpc",
        "peekOfCode": "def list_vpc_subnetworks(gcp_crds: GCPSrvAcc.Credentials, vpc_target_link: str, region: str, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    subnetworks = vpc_client.subnetworks().list(project=project_id, filter=f'network=\"{vpc_target_link}\"', region=region).execute()\n    return subnetworks\ndef check_subnetwork_exists(gcp_crds: GCPSrvAcc.Credentials, subnetwork_name: str, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    if get_subnetwork(gcp_crds, subnetwork_name, vpc_client) is None:",
        "detail": "cloudProviders.gcp.vpc",
        "documentation": {}
    },
    {
        "label": "check_subnetwork_exists",
        "kind": 2,
        "importPath": "cloudProviders.gcp.vpc",
        "description": "cloudProviders.gcp.vpc",
        "peekOfCode": "def check_subnetwork_exists(gcp_crds: GCPSrvAcc.Credentials, subnetwork_name: str, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    if get_subnetwork(gcp_crds, subnetwork_name, vpc_client) is None:\n        return False\n    return True\ndef list_vpc_firewalls(gcp_crds: GCPSrvAcc.Credentials, vpc_target_link: str,vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    project_id = gcp_crds.project_id",
        "detail": "cloudProviders.gcp.vpc",
        "documentation": {}
    },
    {
        "label": "list_vpc_firewalls",
        "kind": 2,
        "importPath": "cloudProviders.gcp.vpc",
        "description": "cloudProviders.gcp.vpc",
        "peekOfCode": "def list_vpc_firewalls(gcp_crds: GCPSrvAcc.Credentials, vpc_target_link: str,vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    firewalls = vpc_client.firewalls().list(project=project_id, filter=f'network=\"{vpc_target_link}\"').execute()\n    return firewalls\ndef list_firewalls(gcp_crds: GCPSrvAcc.Credentials, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    project_id = gcp_crds.project_id",
        "detail": "cloudProviders.gcp.vpc",
        "documentation": {}
    },
    {
        "label": "list_firewalls",
        "kind": 2,
        "importPath": "cloudProviders.gcp.vpc",
        "description": "cloudProviders.gcp.vpc",
        "peekOfCode": "def list_firewalls(gcp_crds: GCPSrvAcc.Credentials, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    firewalls = vpc_client.firewalls().list(project=project_id).execute()\n    return firewalls\ndef get_firewall(gcp_crds: GCPSrvAcc.Credentials, firewall_name: str, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    project_id = gcp_crds.project_id",
        "detail": "cloudProviders.gcp.vpc",
        "documentation": {}
    },
    {
        "label": "get_firewall",
        "kind": 2,
        "importPath": "cloudProviders.gcp.vpc",
        "description": "cloudProviders.gcp.vpc",
        "peekOfCode": "def get_firewall(gcp_crds: GCPSrvAcc.Credentials, firewall_name: str, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    try:\n        firewall = vpc_client.firewalls().get(project=project_id, firewall=firewall_name).execute()\n    except:\n        firewall = None\n    return firewall\ndef create_firewall(gcp_crds: GCPSrvAcc.Credentials, details: dict, vpc_client: Any = None):",
        "detail": "cloudProviders.gcp.vpc",
        "documentation": {}
    },
    {
        "label": "create_firewall",
        "kind": 2,
        "importPath": "cloudProviders.gcp.vpc",
        "description": "cloudProviders.gcp.vpc",
        "peekOfCode": "def create_firewall(gcp_crds: GCPSrvAcc.Credentials, details: dict, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    firewall = vpc_client.firewalls().insert(project=project_id, body=details).execute()\n    return firewall\ndef check_firewall_exists(gcp_crds: GCPSrvAcc.Credentials, firewall_name: str, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    if get_firewall(gcp_crds, firewall_name, vpc_client) is None:",
        "detail": "cloudProviders.gcp.vpc",
        "documentation": {}
    },
    {
        "label": "check_firewall_exists",
        "kind": 2,
        "importPath": "cloudProviders.gcp.vpc",
        "description": "cloudProviders.gcp.vpc",
        "peekOfCode": "def check_firewall_exists(gcp_crds: GCPSrvAcc.Credentials, firewall_name: str, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    if get_firewall(gcp_crds, firewall_name, vpc_client) is None:\n        return False\n    return True\ndef delete_vpc(gcp_crds: GCPSrvAcc.Credentials, vpc_name: str, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    response = vpc_client.networks().delete(project=gcp_crds.project_id, network=f\"{vpc_name}\").execute()",
        "detail": "cloudProviders.gcp.vpc",
        "documentation": {}
    },
    {
        "label": "delete_vpc",
        "kind": 2,
        "importPath": "cloudProviders.gcp.vpc",
        "description": "cloudProviders.gcp.vpc",
        "peekOfCode": "def delete_vpc(gcp_crds: GCPSrvAcc.Credentials, vpc_name: str, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    response = vpc_client.networks().delete(project=gcp_crds.project_id, network=f\"{vpc_name}\").execute()\n    return response\ndef delete_firewall(gcp_crds: GCPSrvAcc.Credentials, firewall_name: str, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    response = vpc_client.firewalls().delete(project=gcp_crds.project_id, firewall=firewall_name).execute()\n    return response",
        "detail": "cloudProviders.gcp.vpc",
        "documentation": {}
    },
    {
        "label": "delete_firewall",
        "kind": 2,
        "importPath": "cloudProviders.gcp.vpc",
        "description": "cloudProviders.gcp.vpc",
        "peekOfCode": "def delete_firewall(gcp_crds: GCPSrvAcc.Credentials, firewall_name: str, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    response = vpc_client.firewalls().delete(project=gcp_crds.project_id, firewall=firewall_name).execute()\n    return response\ndef delete_subnetwork(gcp_crds: GCPSrvAcc.Credentials, subnetwork_name: str, region: str, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    response = vpc_client.subnetworks().delete(project=gcp_crds.project_id, region=region, subnetwork=subnetwork_name).execute()\n    return response",
        "detail": "cloudProviders.gcp.vpc",
        "documentation": {}
    },
    {
        "label": "delete_subnetwork",
        "kind": 2,
        "importPath": "cloudProviders.gcp.vpc",
        "description": "cloudProviders.gcp.vpc",
        "peekOfCode": "def delete_subnetwork(gcp_crds: GCPSrvAcc.Credentials, subnetwork_name: str, region: str, vpc_client: Any = None):\n    if vpc_client is None:\n        vpc_client = get_vpc_client(gcp_crds)\n    response = vpc_client.subnetworks().delete(project=gcp_crds.project_id, region=region, subnetwork=subnetwork_name).execute()\n    return response",
        "detail": "cloudProviders.gcp.vpc",
        "documentation": {}
    },
    {
        "label": "GCP_Settings",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class GCP_Settings(BaseSettings):\n    CLOUD_PROVIDER: str = \"gcp\"\n    IAM_TYPE: str = os.environ.get(\"GCP_IAM_TYPE\", \"service_account\")\n    DEFAULT_REGION: str = os.environ.get(\"GCP_DEFAULT_REGION\", \"asia-south1\")\n    PROJECT_ID: str = os.environ.get(\"GCP_PROJECT_ID\", \"console-424205\")\n    SRV_ACC_PRIVATE_KEY_ID: str = os.environ.get(\"GCP_SRV_ACC_PRIVATE_KEY_ID\", \"84c6cd36101a188c42648801b5cd476794d51613\")\n    SRV_ACC_PRIVATE_KEY: str = os.environ.get(\"GCP_SRV_ACC_PRIVATE_KEY\", \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCu0CXKguMu7zQ9\\nWy22f6Dn7Xni8ABd+Tw1A6iUN0eTZFYdKqyG1uU36LUb5VVcAkqZ9XOgTb/gATSC\\ndAIEQzmaT3Mcs/RRQgx7Qr8OSjDvy3nk8t1wbovWk9W9dLtL1pYMG/uvtySMK2yj\\ne85NtTlaKDQ8KIrT0wCsPQT/IlhSY8gpvoX0axwIdX4032PCOxJk05Oan+ywqFu2\\nYQi/DfUjo5JrkzHZkkTkOKBoe++vAc1zad4V9OUo8S1UcgC/HjCjsXiALt1nERal\\nEtsuKHU9r2jHkD5C6ImG5GIJSfPWP8DLvu/nAezgXxdGytx5fth9IMFVGHZvPpHU\\nywxAPPgbAgMBAAECggEAIOm5o8Y+5dBNopuvIKQo9GHGyA5t00OgrU6SB83coQiM\\nGhO1xfFh2MPsjWMBTkB0MUaATZc14AP6EfGri4foqX/56VaMUlxAI1juxc78JbnG\\nqm97d7aoh27wGCqJNP8i4wbFvVCbBfULEEC4F/Nd5/aX1xe/A6C/iK44aZzayjAF\\njyAcf9mDWLi38ZAFY60OuHR5BeK+Gmna0tJHX5OC3Xn8TONryWcBHMO6T/Hwjt4P\\n5TbhC/H27GxyTdHBxfF6DoQTAiG19wAN90kQzF9c3AZ5EM0Bqsl1j7qFtuPntr3H\\nfpb3WTkwjTigUaXwFqULwOK8Ua1HaekkQsjnkhXzgQKBgQDVX09mu0m21qVbGAdL\\nUw5Ou2eRJkXn1TUjOulxB9r3ImL15X26ZFl8sDREtbJH6iH4Ei374eS4iPJMnXCG\\n4UPkcssPFIcZnlgE9kMAFKM6N7ve5CEeMPeC2qIRhX4GFUbuQP27Th+7B6CkDcs4\\nNrCnrRuGEQuO2lAtQRsV00KEQQKBgQDRvMS7mIajPqIrEuLdP6zZdN18q0DvkTz2\\nM54Nz9QbIl4460DLJ+a3UdrXZm7FpifU0FxY/CDg6Qn2Y+Qgjlgb2aJu2h6Ptuvh\\nNdWPQm484egQQzOnbeP9VS5jUvHc5MV9KNbIqoyOCe6Si5aFWzONqGdh43r8zV92\\nMVziIpa1WwKBgQDISL/Scaj+7Dqo6EQoi1zZwIW1tNRXikVnvWvUwofiBLAZmwJK\\njNmG9isJ9/fSE08xeXcagW7dXQb7rakropXFAY/jpuQtwvliJvq7P6P8CMbbsQ35\\nNgOPG8SXZ9Pkx+Id0HmbcPjN6Zn7hEsmiAeITTCRxrwvqnMqF3viH7zHQQKBgEzc\\ngbhB2C1g2asxW6Q7Hov+cOCsHbrtncqX9fcXz6I2AROY2wDYWYua2rkPV87k6jnq\\nNb2CgEYMANOjncl0gMOMCSPYmVSPc3fv85hxftae7x1ukzJrah6/paVOk0YhLGKG\\noded8K5o414e+4VZe9YQ/fn4lGyqkq5Mvr48cMB7AoGAE2NSJaqQTilQWQA4psLb\\naEoLHdo8CBrb6whXpTTgYu8LayRBuUNRqiOxJq0eFODkLnFTG6MxR86+Pqgs27RE\\ndjEmLoGtHNT78Xqnud4OI0V8CbuWAvKaHsWOERnJR7E7IAXxiSDPPzgMbydVEAup\\n+8AFcRV00F1eu1q3kt+m03w=\\n-----END PRIVATE KEY-----\\n\")\n    SRV_ACC_CLIENT_EMAIL: str = os.environ.get(\"GCP_SRV_ACC_CLIENT_EMAIL\", \"console-automation@console-424205.iam.gserviceaccount.com\")\n    SRV_ACC_CLIENT_ID: str = os.environ.get(\"GCP_SRV_ACC_CLIENT_ID\", \"107868089407702649699\")\n    AUTH_URL: str = os.environ.get(\"GCP_AUTH_URL\", \"https://accounts.google.com/o/oauth2/auth\")",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Settings(BaseSettings):\n    SERVICE_PORT: int = os.environ.get(\"SERVICE_PORT\", 6001)\n    SERVICE_NAME: str = os.environ.get(\"SERVICE_NAME\", \"Console Instances\")\n    SERVICE_DOMAIN: str = os.environ.get(\"SERVICE_DOMAIN\", \"localhost\")\n    SERVICE_BASEPATH: str = os.environ.get(\n        \"SERVICE_BASEPATH\", \"/api/instances\")\n    SERVICE_VERSION: str = os.environ.get(\"SERVICE_VERSION\", \"v1\")\n    AWS_CLOUD_PROVIDER: str = \"aws\"\n    GCP_Config: GCP_Settings = GCP_Settings()  # type: ignore\n    MONGO_DATABASE: str = os.environ.get(\"MONGO_DATABASE\", \"instances\")",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Constants",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Constants():\n    TERRAFORM_FRAMEWORK: str = \"terraform\"\n    SDK_FRAMEWORK: str = \"sdk\"\nconstants = Constants()\n# class Databases():\n#     mongo_client = None\n#     @ classmethod\n#     def get_mongo_connection(cls):\n#         if cls.mongo_client is None:\n#             if settings.MONGO_USERNAME != \"\" and settings.MONGO_PASSWORD != \"\":",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "settings = Settings()\nclass Constants():\n    TERRAFORM_FRAMEWORK: str = \"terraform\"\n    SDK_FRAMEWORK: str = \"sdk\"\nconstants = Constants()\n# class Databases():\n#     mongo_client = None\n#     @ classmethod\n#     def get_mongo_connection(cls):\n#         if cls.mongo_client is None:",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "constants",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "constants = Constants()\n# class Databases():\n#     mongo_client = None\n#     @ classmethod\n#     def get_mongo_connection(cls):\n#         if cls.mongo_client is None:\n#             if settings.MONGO_USERNAME != \"\" and settings.MONGO_PASSWORD != \"\":\n#                 cls.mongo_client = MongoClient(\n#                     f\"mongodb://{settings.MONGO_USERNAME}:{settings.MONGO_PASSWORD}@{settings.MONGO_HOST}:{settings.MONGO_PORT}/\")\n#             else:",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(\n    title=settings.SERVICE_NAME,\n    proxy_headers=True,\n    trusted_hosts=[\"*\"],\n    max_request_size=1024 * 1024 * 1024,  # Body limit in bytes (1 GB)\n    openapi_url=f\"{settings.SERVICE_BASEPATH}/{settings.SERVICE_VERSION}/openapi.json\",\n    docs_url=\"/docs\"\n)\napp.add_middleware(\n    CORSMiddleware,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "IAM_Role",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class IAM_Role(BaseModel):\n    name: str = \"\"\n    description: str = \"\"\n    policies: list = []\n    email: Optional[str] = \"\"\n    instanceId: Optional[str] = \"\"\n    product: Optional[str] = \"\"\nclass Response(BaseModel):\n    message: Optional[str] = \"\"\n    data: Optional[Any] = {}",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class Response(BaseModel):\n    message: Optional[str] = \"\"\n    data: Optional[Any] = {}\n    statusCode: Optional[int] = 0\n    error: Optional[Any] = \"\"\nclass RoutingConfig(BaseModel):\n    routingMode: Optional[str] = \"REGIONAL\"\nclass SubNetwork(BaseModel):\n    vpc_name: str\n    name: str",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "RoutingConfig",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class RoutingConfig(BaseModel):\n    routingMode: Optional[str] = \"REGIONAL\"\nclass SubNetwork(BaseModel):\n    vpc_name: str\n    name: str\n    ipCidrRange: Optional[str] = \"\"\n    region: Optional[str] = \"\"\n    network: str\nclass FireWall(BaseModel):\n    name: str = None",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "SubNetwork",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class SubNetwork(BaseModel):\n    vpc_name: str\n    name: str\n    ipCidrRange: Optional[str] = \"\"\n    region: Optional[str] = \"\"\n    network: str\nclass FireWall(BaseModel):\n    name: str = None\n    network: str = None\n    direction: Optional[str] = \"INGRESS\"",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "FireWall",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class FireWall(BaseModel):\n    name: str = None\n    network: str = None\n    direction: Optional[str] = \"INGRESS\"\n    priority: Optional[int] = 1000\n    sourceRanges: list[str]\n    sourceTags: Optional[list[str]] = None\n    targetTags: Optional[list[str]] = None\n    allowed: list[Any] = None\n    denied: Optional[list] = None",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "VPC",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class VPC(BaseModel):\n    name: str\n    description: Optional[str] = \"\"\n    cidr: Optional[str] = \"\"\n    network: Optional[str] = \"\"\n    autoCreateSubnetworks: Optional[bool] = False\n    enableFlowLogs: Optional[bool] = False\n    mtu: Optional[int] = 1460\n    routingConfig: Optional[RoutingConfig] = RoutingConfig()\n    ports: Optional[List[str]] = []",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ComputeEngine",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class ComputeEngine(BaseModel):\n    class InitializeParams(BaseModel):\n        sourceImage: Optional[str] = \"projects/debian-cloud/global/images/family/debian-11\"\n        diskSizeGb: Optional[int] = 10\n        diskType: Optional[str] = \"pd-standard\"\n    class Disks(BaseModel):\n        boot: Optional[bool] = True\n        autoDelete: Optional[bool] = True\n        type: Optional[str] = \"PERSISTENT\"\n        initializeParams: 'ComputeEngine.InitializeParams'",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "SSHKey",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class SSHKey(BaseModel):\n    userName: Optional[str] = \"\"\n    password: Optional[str] = \"\"\n    publicKey: Optional[str] = \"\"\n    keyFilePath: Optional[str] = \"\"\nclass InstanceDatabase(BaseModel):\n    type: Optional[str] = \"\"\n    database: Optional[str] = \"\"\n    name: Optional[str] = \"\"\n    portNumber: Optional[int] = 0",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "InstanceDatabase",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class InstanceDatabase(BaseModel):\n    type: Optional[str] = \"\"\n    database: Optional[str] = \"\"\n    name: Optional[str] = \"\"\n    portNumber: Optional[int] = 0\n    userName: Optional[str] = \"\"\n    password: Optional[str] = \"\"\nclass InstanceConfiguration(BaseModel):\n    instanceId: str = \"\"\n    productId: str = \"\"",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "InstanceConfiguration",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class InstanceConfiguration(BaseModel):\n    instanceId: str = \"\"\n    productId: str = \"\"\n    ssh: Optional[SSHKey] = SSHKey()\n    databases: List[InstanceDatabase] = []\nclass Instance(BaseModel):\n    name: str = \"\"\n    provider: str = \"\"\n    productID: str = \"\"\n    memory: float = 10",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Instance",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class Instance(BaseModel):\n    name: str = \"\"\n    provider: str = \"\"\n    productID: str = \"\"\n    memory: float = 10\n    diskType: str = \"pd-standard\"\n    machineType: str = \"\"\n    planId: str = \"\"\n    status: Optional[str] = \"\"\n    createdOn: Optional[datetime.date] = datetime.date.today()",
        "detail": "schemas",
        "documentation": {}
    }
]