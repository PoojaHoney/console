[
    {
        "label": "IAM_Role",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "IAM_Role",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "iam",
        "importPath": "api_v1.handlers",
        "description": "api_v1.handlers",
        "isExtraImport": true,
        "detail": "api_v1.handlers",
        "documentation": {}
    },
    {
        "label": "service_account",
        "importPath": "google.oauth2",
        "description": "google.oauth2",
        "isExtraImport": true,
        "detail": "google.oauth2",
        "documentation": {}
    },
    {
        "label": "service_account",
        "importPath": "google.oauth2",
        "description": "google.oauth2",
        "isExtraImport": true,
        "detail": "google.oauth2",
        "documentation": {}
    },
    {
        "label": "service_account",
        "importPath": "google.oauth2",
        "description": "google.oauth2",
        "isExtraImport": true,
        "detail": "google.oauth2",
        "documentation": {}
    },
    {
        "label": "jsonable_encoder",
        "importPath": "fastapi.encoders",
        "description": "fastapi.encoders",
        "isExtraImport": true,
        "detail": "fastapi.encoders",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "databases",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "json,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json.",
        "description": "json.",
        "detail": "json.",
        "documentation": {}
    },
    {
        "label": "cloudProviders.gcp.credentials",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudProviders.gcp.credentials",
        "description": "cloudProviders.gcp.credentials",
        "detail": "cloudProviders.gcp.credentials",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cloudProviders.gcp.iam",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudProviders.gcp.iam",
        "description": "cloudProviders.gcp.iam",
        "detail": "cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "iam",
        "importPath": "api_v1.endpoints",
        "description": "api_v1.endpoints",
        "isExtraImport": true,
        "detail": "api_v1.endpoints",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "googleapiclient.discovery",
        "description": "googleapiclient.discovery",
        "isExtraImport": true,
        "detail": "googleapiclient.discovery",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "api_router",
        "importPath": "api_v1.api",
        "description": "api_v1.api",
        "isExtraImport": true,
        "detail": "api_v1.api",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "create_iam_role",
        "kind": 2,
        "importPath": "backend.api_v1.endpoints.iam",
        "description": "backend.api_v1.endpoints.iam",
        "peekOfCode": "def create_iam_role(cloud_provider: str, details: IAM_Role):\n    try:\n        return IAM.create_iam_role(cloud_provider=cloud_provider, details=details)\n    except Exception as exp:\n        return API_Response(error=exp, status_code=400).model_dump()\n@router.put(\"/iam_role/{cloud_provider}/{action}\")\ndef update_iam_role(cloud_provider: str, details: IAM_Role, action: str):\n    try:\n        return IAM.update_iam_role(cloud_provider=cloud_provider, details=details, action=action)\n    except Exception as exp:",
        "detail": "backend.api_v1.endpoints.iam",
        "documentation": {}
    },
    {
        "label": "update_iam_role",
        "kind": 2,
        "importPath": "backend.api_v1.endpoints.iam",
        "description": "backend.api_v1.endpoints.iam",
        "peekOfCode": "def update_iam_role(cloud_provider: str, details: IAM_Role, action: str):\n    try:\n        return IAM.update_iam_role(cloud_provider=cloud_provider, details=details, action=action)\n    except Exception as exp:\n        return API_Response(error=exp, status_code=400).model_dump()\n@router.delete(\"/iam_role/{cloud_provider}\")\ndef delete_iam_role(cloud_provider: str, service_account: str):\n    try:\n        return IAM.delete_service_account(cloud_provider=cloud_provider, service_account=service_account)\n    except Exception as exp:",
        "detail": "backend.api_v1.endpoints.iam",
        "documentation": {}
    },
    {
        "label": "delete_iam_role",
        "kind": 2,
        "importPath": "backend.api_v1.endpoints.iam",
        "description": "backend.api_v1.endpoints.iam",
        "peekOfCode": "def delete_iam_role(cloud_provider: str, service_account: str):\n    try:\n        return IAM.delete_service_account(cloud_provider=cloud_provider, service_account=service_account)\n    except Exception as exp:\n        return API_Response(error=exp, status_code=400).model_dump()\n@router.post(\"/iam_role_keys\")\ndef create_iam_role_keys(service_account: str):\n    try:\n        return IAM.create_iam_role_keys(service_account=service_account)\n    except Exception as exp:",
        "detail": "backend.api_v1.endpoints.iam",
        "documentation": {}
    },
    {
        "label": "create_iam_role_keys",
        "kind": 2,
        "importPath": "backend.api_v1.endpoints.iam",
        "description": "backend.api_v1.endpoints.iam",
        "peekOfCode": "def create_iam_role_keys(service_account: str):\n    try:\n        return IAM.create_iam_role_keys(service_account=service_account)\n    except Exception as exp:\n        return API_Response(error=exp, status_code=400).model_dump()\n@router.get(\"/iam_role_permissions/{cloud_provider}\")\ndef get_iam_role_permissions(cloud_provider: str, role_name: str):\n    try:\n        return IAM.get_iam_role_permissions(cloud_provider=cloud_provider, role_name=role_name)\n    except Exception as exp:",
        "detail": "backend.api_v1.endpoints.iam",
        "documentation": {}
    },
    {
        "label": "get_iam_role_permissions",
        "kind": 2,
        "importPath": "backend.api_v1.endpoints.iam",
        "description": "backend.api_v1.endpoints.iam",
        "peekOfCode": "def get_iam_role_permissions(cloud_provider: str, role_name: str):\n    try:\n        return IAM.get_iam_role_permissions(cloud_provider=cloud_provider, role_name=role_name)\n    except Exception as exp:\n        return API_Response(error=exp, status_code=400).model_dump()\n@router.post(\"/iam_predefined_roles/{cloud_provider}\")\ndef create_iam_predefined_roles(cloud_provider: str) -> API_Response:\n    try:\n        response = IAM.create_iam_predefined_roles(cloud_provider=cloud_provider)\n        return response",
        "detail": "backend.api_v1.endpoints.iam",
        "documentation": {}
    },
    {
        "label": "create_iam_predefined_roles",
        "kind": 2,
        "importPath": "backend.api_v1.endpoints.iam",
        "description": "backend.api_v1.endpoints.iam",
        "peekOfCode": "def create_iam_predefined_roles(cloud_provider: str) -> API_Response:\n    try:\n        response = IAM.create_iam_predefined_roles(cloud_provider=cloud_provider)\n        return response\n    except Exception as exp:\n        return API_Response(error=exp, status_code=400).model_dump()\n@router.get(\"/iam_predefined_roles/{cloud_provider}\")\ndef get_iam_predefined_roles(cloud_provider: str,\n                filter: str = Query(default=None, max_length=200)):\n    try:",
        "detail": "backend.api_v1.endpoints.iam",
        "documentation": {}
    },
    {
        "label": "get_iam_predefined_roles",
        "kind": 2,
        "importPath": "backend.api_v1.endpoints.iam",
        "description": "backend.api_v1.endpoints.iam",
        "peekOfCode": "def get_iam_predefined_roles(cloud_provider: str,\n                filter: str = Query(default=None, max_length=200)):\n    try:\n        return IAM.get_iam_predefined_roles(cloud_provider=cloud_provider, filter=filter)\n    except Exception as exp:\n        return API_Response(error=exp, status_code=400).model_dump()",
        "detail": "backend.api_v1.endpoints.iam",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api_v1.endpoints.iam",
        "description": "backend.api_v1.endpoints.iam",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/iam_role/{cloud_provider}\")\ndef create_iam_role(cloud_provider: str, details: IAM_Role):\n    try:\n        return IAM.create_iam_role(cloud_provider=cloud_provider, details=details)\n    except Exception as exp:\n        return API_Response(error=exp, status_code=400).model_dump()\n@router.put(\"/iam_role/{cloud_provider}/{action}\")\ndef update_iam_role(cloud_provider: str, details: IAM_Role, action: str):\n    try:",
        "detail": "backend.api_v1.endpoints.iam",
        "documentation": {}
    },
    {
        "label": "create_iam_role",
        "kind": 2,
        "importPath": "backend.api_v1.handlers.iam",
        "description": "backend.api_v1.handlers.iam",
        "peekOfCode": "def create_iam_role(cloud_provider: str, details: IAM_Role) -> API_Response:\n    if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n        if details.name == \"\" or details.name == None:\n            return API_Response(error=ValueError(\"Please provide valid role name\"), status_code=400).model_dump()\n        if len(details.name) < 6 and len(details.name) > 30:\n            return API_Response(error=ValueError(\"Role name should be between 6 and 30 characters length\"), status_code=400).model_dump()\n        gcp_client = GCP_Crds.get_gcp_crds({\"project_id\":settings.GCP_Config.PROJECT_ID,\n                                \"private_key_id\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                \"private_key\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                \"client_email\":settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,",
        "detail": "backend.api_v1.handlers.iam",
        "documentation": {}
    },
    {
        "label": "update_iam_role",
        "kind": 2,
        "importPath": "backend.api_v1.handlers.iam",
        "description": "backend.api_v1.handlers.iam",
        "peekOfCode": "def update_iam_role(cloud_provider: str, details: IAM_Role, action: str) -> API_Response:\n    if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n        if action ==\"\" or action == None:\n            return API_Response(error=ValueError(\"Please provide valid action\"), status_code=400).model_dump()\n        gcp_client = GCP_Crds.get_gcp_crds({\"project_id\":settings.GCP_Config.PROJECT_ID,\n                                \"private_key_id\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                \"private_key\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                \"client_email\":settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                        })",
        "detail": "backend.api_v1.handlers.iam",
        "documentation": {}
    },
    {
        "label": "list_service_accounts",
        "kind": 2,
        "importPath": "backend.api_v1.handlers.iam",
        "description": "backend.api_v1.handlers.iam",
        "peekOfCode": "def list_service_accounts():\n    pass\ndef delete_service_account(cloud_provider: str, service_account: str):\n    if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n        gcp_client = GCP_Crds.get_gcp_crds({\"project_id\":settings.GCP_Config.PROJECT_ID,\n                                \"private_key_id\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                \"private_key\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                \"client_email\":settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                        })",
        "detail": "backend.api_v1.handlers.iam",
        "documentation": {}
    },
    {
        "label": "delete_service_account",
        "kind": 2,
        "importPath": "backend.api_v1.handlers.iam",
        "description": "backend.api_v1.handlers.iam",
        "peekOfCode": "def delete_service_account(cloud_provider: str, service_account: str):\n    if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n        gcp_client = GCP_Crds.get_gcp_crds({\"project_id\":settings.GCP_Config.PROJECT_ID,\n                                \"private_key_id\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                \"private_key\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                \"client_email\":settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                        })\n        iam_client = IAM.get_iam_client(gcp_client)\n        if service_account == \"\" or service_account == None:",
        "detail": "backend.api_v1.handlers.iam",
        "documentation": {}
    },
    {
        "label": "create_iam_role_key",
        "kind": 2,
        "importPath": "backend.api_v1.handlers.iam",
        "description": "backend.api_v1.handlers.iam",
        "peekOfCode": "def create_iam_role_key(service_account: str):\n    gcp_client = GCP_Crds.get_gcp_crds({\"project_id\":settings.GCP_Config.PROJECT_ID,\n                                \"private_key_id\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                \"private_key\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                \"client_email\":settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                            })\n    return create_service_account_key(gcp_crds=gcp_client, service_account=service_account) \ndef create_service_account_key( service_account: str, gcp_crds: GCPSrvAcc.Credentials, iam_client: Any = None):\n        if service_account == \"\" or service_account == None:",
        "detail": "backend.api_v1.handlers.iam",
        "documentation": {}
    },
    {
        "label": "create_service_account_key",
        "kind": 2,
        "importPath": "backend.api_v1.handlers.iam",
        "description": "backend.api_v1.handlers.iam",
        "peekOfCode": "def create_service_account_key( service_account: str, gcp_crds: GCPSrvAcc.Credentials, iam_client: Any = None):\n        if service_account == \"\" or service_account == None:\n            return API_Response(error=ValueError(\"Please provide service account name\"), status_code=400).model_dump()\n        key = IAM.create_service_account_key(gcp_crds=gcp_crds, service_account=service_account, iam_client=iam_client)\n        json_key_data = base64.b64decode(key['privateKeyData']).decode('utf-8')\n        json_key_file = json.loads(json_key_data)\n        #save file to cloud store\n        return API_Response(message=\"Service account key created successfully\", data=json_key_file, status_code=200).model_dump()\ndef get_iam_role_permissions(cloud_provider: str, role_name: str):\n    if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:",
        "detail": "backend.api_v1.handlers.iam",
        "documentation": {}
    },
    {
        "label": "get_iam_role_permissions",
        "kind": 2,
        "importPath": "backend.api_v1.handlers.iam",
        "description": "backend.api_v1.handlers.iam",
        "peekOfCode": "def get_iam_role_permissions(cloud_provider: str, role_name: str):\n    if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n        if role_name == \"\" or role_name == None:\n            return API_Response(error=ValueError(\"Please provide role name\"), status_code=400)\n        gcp_client = GCP_Crds.get_gcp_crds({\"project_id\":settings.GCP_Config.PROJECT_ID,\n                                \"private_key_id\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                \"private_key\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                \"client_email\":settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                            })",
        "detail": "backend.api_v1.handlers.iam",
        "documentation": {}
    },
    {
        "label": "create_iam_predefined_roles",
        "kind": 2,
        "importPath": "backend.api_v1.handlers.iam",
        "description": "backend.api_v1.handlers.iam",
        "peekOfCode": "def create_iam_predefined_roles(cloud_provider: str):\n    if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n        gcp_client = GCP_Crds.get_gcp_crds({\"project_id\":settings.GCP_Config.PROJECT_ID,\n                                \"private_key_id\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY_ID,\n                                \"private_key\":settings.GCP_Config.SRV_ACC_PRIVATE_KEY,\n                                \"client_email\":settings.GCP_Config.SRV_ACC_CLIENT_EMAIL,\n                                \"token_uri\": settings.GCP_Config.TOKEN_URL,\n                            })\n        roles = IAM.list_predefined_roles(gcp_client)\n        if len(roles):",
        "detail": "backend.api_v1.handlers.iam",
        "documentation": {}
    },
    {
        "label": "get_iam_predefined_roles",
        "kind": 2,
        "importPath": "backend.api_v1.handlers.iam",
        "description": "backend.api_v1.handlers.iam",
        "peekOfCode": "def get_iam_predefined_roles(cloud_provider: str,\n                filter: str = Query(default=None, max_length=200)):\n    if cloud_provider == settings.GCP_Config.CLOUD_PROVIDER:\n        try:\n            roles = []\n            db = databases.get_mongo_database(db_name=\"gcpMasterData\")\n            if filter == None or filter == \"\":\n                roles = db[\"iam_predefined_roles\"].find()\n            else:\n                roles = db[\"iam_predefined_roles\"].find({\"$or\":[{\"name\": {\"$regex\": f\".*{filter}.*\"}},{\"title\": {\"$regex\": f\".*{filter}.*\"}}]})",
        "detail": "backend.api_v1.handlers.iam",
        "documentation": {}
    },
    {
        "label": "api_router",
        "kind": 5,
        "importPath": "backend.api_v1.api",
        "description": "backend.api_v1.api",
        "peekOfCode": "api_router = APIRouter()\napi_router.include_router(iam.router, tags=[\"iam\"])",
        "detail": "backend.api_v1.api",
        "documentation": {}
    },
    {
        "label": "get_gcp_crds",
        "kind": 2,
        "importPath": "backend.cloudProviders.gcp.credentials",
        "description": "backend.cloudProviders.gcp.credentials",
        "peekOfCode": "def get_gcp_crds(crds: dict):\n    return GCPSrvAcc.Credentials.from_service_account_info(\n    # filename=\"svc-acc-gcp-cloud-automation-cred.json\", \n    crds,\n    scopes=[\"https://www.googleapis.com/auth/cloud-platform\"])",
        "detail": "backend.cloudProviders.gcp.credentials",
        "documentation": {}
    },
    {
        "label": "get_iam_client",
        "kind": 2,
        "importPath": "backend.cloudProviders.gcp.iam",
        "description": "backend.cloudProviders.gcp.iam",
        "peekOfCode": "def get_iam_client(gcp_crds):\n    return build(serviceName=\"iam\", version=\"v1\", credentials=gcp_crds)\ndef get_resource_manager(gcp_crds: GCPSrvAcc.Credentials):\n    return build(\"cloudresourcemanager\", \"v1\", credentials=gcp_crds)\ndef create_service_account(gcp_crds: GCPSrvAcc.Credentials, details: dict, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    service_account = iam_client.projects().serviceAccounts().create(\n        # name=\"projects/{}/serviceAccounts/\".format(gcp_crds.project_id), ",
        "detail": "backend.cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "get_resource_manager",
        "kind": 2,
        "importPath": "backend.cloudProviders.gcp.iam",
        "description": "backend.cloudProviders.gcp.iam",
        "peekOfCode": "def get_resource_manager(gcp_crds: GCPSrvAcc.Credentials):\n    return build(\"cloudresourcemanager\", \"v1\", credentials=gcp_crds)\ndef create_service_account(gcp_crds: GCPSrvAcc.Credentials, details: dict, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    service_account = iam_client.projects().serviceAccounts().create(\n        # name=\"projects/{}/serviceAccounts/\".format(gcp_crds.project_id), \n        name=f\"projects/{project_id}\",\n        body={\"accountId\": details[\"name\"], \"serviceAccount\": {",
        "detail": "backend.cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "create_service_account",
        "kind": 2,
        "importPath": "backend.cloudProviders.gcp.iam",
        "description": "backend.cloudProviders.gcp.iam",
        "peekOfCode": "def create_service_account(gcp_crds: GCPSrvAcc.Credentials, details: dict, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    service_account = iam_client.projects().serviceAccounts().create(\n        # name=\"projects/{}/serviceAccounts/\".format(gcp_crds.project_id), \n        name=f\"projects/{project_id}\",\n        body={\"accountId\": details[\"name\"], \"serviceAccount\": {\n                        \"displayName\": details[\"name\"],\n                        \"description\": details[\"description\"]}}",
        "detail": "backend.cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "rename_service_account",
        "kind": 2,
        "importPath": "backend.cloudProviders.gcp.iam",
        "description": "backend.cloudProviders.gcp.iam",
        "peekOfCode": "def rename_service_account(gcp_crds: GCPSrvAcc.Credentials, details: dict, iam: Any, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    iam[\"displayName\"] = details[\"name\"]\n    iam[\"description\"] = details[\"description\"]\n    service_account = iam_client.projects().serviceAccounts().update(\n        name=f\"projects/-/serviceAccounts/{iam['email']}\",\n        body=iam\n    ).execute()\n    return service_account",
        "detail": "backend.cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "disable_service_account",
        "kind": 2,
        "importPath": "backend.cloudProviders.gcp.iam",
        "description": "backend.cloudProviders.gcp.iam",
        "peekOfCode": "def disable_service_account(gcp_crds: GCPSrvAcc.Credentials, service_account: str, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    service_account = iam_client.projects().serviceAccounts().disable(\n        name=f\"projects/-/serviceAccounts/{service_account}\"\n    ).execute()\ndef enable_service_account(gcp_crds: GCPSrvAcc.Credentials, service_account: str, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    service_account = iam_client.projects().serviceAccounts().enable(",
        "detail": "backend.cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "enable_service_account",
        "kind": 2,
        "importPath": "backend.cloudProviders.gcp.iam",
        "description": "backend.cloudProviders.gcp.iam",
        "peekOfCode": "def enable_service_account(gcp_crds: GCPSrvAcc.Credentials, service_account: str, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    service_account = iam_client.projects().serviceAccounts().enable(\n        name=f\"projects/-/serviceAccounts/{service_account}\"\n    ).execute()\ndef delete_service_account(gcp_crds: GCPSrvAcc.Credentials, service_account: str, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    iam_client.projects().serviceAccounts().delete(",
        "detail": "backend.cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "delete_service_account",
        "kind": 2,
        "importPath": "backend.cloudProviders.gcp.iam",
        "description": "backend.cloudProviders.gcp.iam",
        "peekOfCode": "def delete_service_account(gcp_crds: GCPSrvAcc.Credentials, service_account: str, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    iam_client.projects().serviceAccounts().delete(\n        name=f\"projects/-/serviceAccounts/{service_account}\"\n    ).execute()\ndef list_service_accounts(gcp_crds: GCPSrvAcc.Credentials, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    project_id = gcp_crds.project_id",
        "detail": "backend.cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "list_service_accounts",
        "kind": 2,
        "importPath": "backend.cloudProviders.gcp.iam",
        "description": "backend.cloudProviders.gcp.iam",
        "peekOfCode": "def list_service_accounts(gcp_crds: GCPSrvAcc.Credentials, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    project_id = gcp_crds.project_id\n    service_accounts = iam_client.projects().serviceAccounts().list(\n        name=f\"projects/{project_id}\"\n    ).execute()\n    return service_accounts\ndef get_service_account(gcp_crds: GCPSrvAcc.Credentials, details: dict, iam_client: Any = None):\n    if iam_client is None:",
        "detail": "backend.cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "get_service_account",
        "kind": 2,
        "importPath": "backend.cloudProviders.gcp.iam",
        "description": "backend.cloudProviders.gcp.iam",
        "peekOfCode": "def get_service_account(gcp_crds: GCPSrvAcc.Credentials, details: dict, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds)\n    email = \"\"\n    if not details.get(\"email\") or details[\"email\"] == \"\":\n        email = f\"{details['name']}@{gcp_crds.project_id}.iam.gserviceaccount.com\"\n    else:\n        email = details[\"email\"]\n    try:\n        account = iam_client.projects().serviceAccounts().get(",
        "detail": "backend.cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "check_service_account_exists",
        "kind": 2,
        "importPath": "backend.cloudProviders.gcp.iam",
        "description": "backend.cloudProviders.gcp.iam",
        "peekOfCode": "def check_service_account_exists(gcp_crds: GCPSrvAcc.Credentials, details: dict, iam_client: Any = None):\n    service_account = get_service_account(gcp_crds=gcp_crds, details=details, iam_client =iam_client)\n    if service_account is None:\n        return False\n    return True\ndef get_service_account_policy(gcp_crds: GCPSrvAcc.Credentials, service_account: str, version: int = 1):\n    resource_manager = get_resource_manager(gcp_crds=gcp_crds)\n    policy = list_policies_project(gcp_crds=gcp_crds, resource_manager=resource_manager, version=version)\n    polices = []\n    for role in policy[\"bindings\"]:",
        "detail": "backend.cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "get_service_account_policy",
        "kind": 2,
        "importPath": "backend.cloudProviders.gcp.iam",
        "description": "backend.cloudProviders.gcp.iam",
        "peekOfCode": "def get_service_account_policy(gcp_crds: GCPSrvAcc.Credentials, service_account: str, version: int = 1):\n    resource_manager = get_resource_manager(gcp_crds=gcp_crds)\n    policy = list_policies_project(gcp_crds=gcp_crds, resource_manager=resource_manager, version=version)\n    polices = []\n    for role in policy[\"bindings\"]:\n        for member in role[\"members\"]:\n            if member == f\"serviceAccount:{service_account}\":\n                polices.append(role[\"role\"])\n    return polices\ndef list_predefined_roles(gcp_crds: GCPSrvAcc.Credentials):",
        "detail": "backend.cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "list_predefined_roles",
        "kind": 2,
        "importPath": "backend.cloudProviders.gcp.iam",
        "description": "backend.cloudProviders.gcp.iam",
        "peekOfCode": "def list_predefined_roles(gcp_crds: GCPSrvAcc.Credentials):\n    iam = get_iam_client(gcp_crds=gcp_crds)\n    roles = []\n    nextToken = \"\"\n    while True:\n        if nextToken == \"\":\n            response = iam.roles().list().execute()\n        else:\n            response = iam.roles().list(pageToken=nextToken).execute()\n        nextToken = response.get(\"nextPageToken\")",
        "detail": "backend.cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "list_policies_project",
        "kind": 2,
        "importPath": "backend.cloudProviders.gcp.iam",
        "description": "backend.cloudProviders.gcp.iam",
        "peekOfCode": "def list_policies_project(gcp_crds: GCPSrvAcc.Credentials, version: int = 3, resource_manager: Any = None):\n    if resource_manager is None:\n        resource_manager = get_resource_manager(gcp_crds=gcp_crds)\n    policy = resource_manager.projects().getIamPolicy(\n        resource = gcp_crds.project_id,\n        body = {\"options\": {\"requestedPolicyVersion\": version}}\n    ).execute()\n    return policy\ndef set_service_account_policy(gcp_crds: GCPSrvAcc.Credentials, service_account: str, roles: list, resource_manager: Any = None):\n    if not len(roles):",
        "detail": "backend.cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "set_service_account_policy",
        "kind": 2,
        "importPath": "backend.cloudProviders.gcp.iam",
        "description": "backend.cloudProviders.gcp.iam",
        "peekOfCode": "def set_service_account_policy(gcp_crds: GCPSrvAcc.Credentials, service_account: str, roles: list, resource_manager: Any = None):\n    if not len(roles):\n        return\n    if resource_manager is None:\n        resource_manager = get_resource_manager(gcp_crds=gcp_crds)\n    policies = list_policies_project(gcp_crds=gcp_crds)\n    if policies.get(\"bindings\") is None:\n        policies[\"bindings\"] = []\n    for role in roles:\n        policies[\"bindings\"].append({",
        "detail": "backend.cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "delete_service_account_policy",
        "kind": 2,
        "importPath": "backend.cloudProviders.gcp.iam",
        "description": "backend.cloudProviders.gcp.iam",
        "peekOfCode": "def delete_service_account_policy(gcp_crds: GCPSrvAcc.Credentials, service_account: str, roles: list, resource_manager: Any = None):\n    if not len(roles):\n        return\n    if resource_manager is None:\n        resource_manager = get_resource_manager(gcp_crds=gcp_crds)\n    policies = list_policies_project(gcp_crds=gcp_crds)\n    for role in roles:\n        for binding in policies[\"bindings\"]:\n            if binding[\"role\"] == role:\n                for member in binding[\"members\"]:",
        "detail": "backend.cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "update_service_account_policy",
        "kind": 2,
        "importPath": "backend.cloudProviders.gcp.iam",
        "description": "backend.cloudProviders.gcp.iam",
        "peekOfCode": "def update_service_account_policy(gcp_crds: GCPSrvAcc.Credentials, service_account: str, deleted_roles: list[str], added_roles: list[str], resource_manager: Any = None):\n    if not len(deleted_roles) and not len(added_roles):\n        return\n    if resource_manager is None:\n        resource_manager = get_resource_manager(gcp_crds=gcp_crds)\n    policies = list_policies_project(gcp_crds=gcp_crds)\n    if policies.get(\"bindings\") is None:\n        policies[\"bindings\"] = []\n    if len(added_roles):\n        count = len(added_roles)",
        "detail": "backend.cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "create_service_account_key",
        "kind": 2,
        "importPath": "backend.cloudProviders.gcp.iam",
        "description": "backend.cloudProviders.gcp.iam",
        "peekOfCode": "def create_service_account_key(gcp_crds: GCPSrvAcc.Credentials, service_account: str, iam_client: Any = None):\n    if iam_client is None:\n        iam_client = get_iam_client(gcp_crds=gcp_crds)\n    key = iam_client.projects().serviceAccounts().keys().create(\n        name=f\"projects/-/serviceAccounts/{service_account}\"\n        ).execute()\n    return key",
        "detail": "backend.cloudProviders.gcp.iam",
        "documentation": {}
    },
    {
        "label": "GCP_Settings",
        "kind": 6,
        "importPath": "backend.config",
        "description": "backend.config",
        "peekOfCode": "class GCP_Settings(BaseSettings):\n    CLOUD_PROVIDER: str = \"gcp\"\n    IAM_TYPE: str = os.environ.get(\"GCP_IAM_TYPE\", \"service_account\")\n    DEFAULT_REGION: str = os.environ.get(\"GCP_DEFAULT_REGION\", \"asia-south1\")\n    PROJECT_ID: str = os.environ.get(\"GCP_PROJECT_ID\")\n    SRV_ACC_PRIVATE_KEY_ID: str = os.environ.get(\"GCP_SRV_ACC_PRIVATE_KEY_ID\")\n    SRV_ACC_PRIVATE_KEY: str = os.environ.get(\"GCP_SRV_ACC_PRIVATE_KEY\")\n    SRV_ACC_CLIENT_EMAIL: str = os.environ.get(\"GCP_SRV_ACC_CLIENT_EMAIL\")\n    CLIENT_ID: str = os.environ.get(\"GCP_CLIENT_ID\")\n    AUTH_URL: str = os.environ.get(\"GCP_AUTH_URL\")",
        "detail": "backend.config",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "backend.config",
        "description": "backend.config",
        "peekOfCode": "class Settings(BaseSettings):\n    SERVICE_PORT: int = os.environ.get(\"SERVICE_PORT\", 6001)\n    SERVICE_NAME: str = os.environ.get(\"SERVICE_NAME\", \"Console Instances\")\n    SERVICE_DOMAIN: str = os.environ.get(\"SERVICE_DOMAIN\", \"localhost\")\n    SERVICE_BASEPATH: str = os.environ.get(\"SERVICE_BASEPATH\", \"/api/instances\")\n    SERVICE_VERSION: str = os.environ.get(\"SERVICE_VERSION\", \"v1\")\n    AWS_CLOUD_PROVIDER: str = \"aws\"\n    GCP_Config: GCP_Settings = GCP_Settings() # type: ignore\nclass Databases():\n    mongo_client = None",
        "detail": "backend.config",
        "documentation": {}
    },
    {
        "label": "Databases",
        "kind": 6,
        "importPath": "backend.config",
        "description": "backend.config",
        "peekOfCode": "class Databases():\n    mongo_client = None\n    @classmethod\n    def get_mongo_connection(cls):\n        if cls.mongo_client is None:\n            cls.mongo_client = MongoClient(\"mongodb://localhost:27017/\")\n        return cls.mongo_client\n    @classmethod\n    def get_mongo_database(cls, db_name: str):\n        return cls.get_mongo_connection()[db_name]",
        "detail": "backend.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "backend.config",
        "description": "backend.config",
        "peekOfCode": "settings = Settings()\ndatabases = Databases()",
        "detail": "backend.config",
        "documentation": {}
    },
    {
        "label": "databases",
        "kind": 5,
        "importPath": "backend.config",
        "description": "backend.config",
        "peekOfCode": "databases = Databases()",
        "detail": "backend.config",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "app = FastAPI(\n    title=settings.SERVICE_NAME, openapi_url=f\"{settings.SERVICE_BASEPATH}/{settings.SERVICE_VERSION}/openapi.json\", docs_url=\"/docs\"\n)\napp.include_router(api_router, prefix=f\"{settings.SERVICE_BASEPATH}/{settings.SERVICE_VERSION}\")\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=settings.SERVICE_DOMAIN, port=settings.SERVICE_PORT)",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "IAM_Role",
        "kind": 6,
        "importPath": "backend.schemas",
        "description": "backend.schemas",
        "peekOfCode": "class IAM_Role(BaseModel):\n    name: str\n    description: str\n    policies: list\n    email: Optional[str] = \"\"\nclass Response(BaseModel):\n    message: Optional[str] = \"\"\n    data: Optional[Any] = {}\n    status_code: Optional[int] = 0\n    error: Optional[Any] = \"\"",
        "detail": "backend.schemas",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "backend.schemas",
        "description": "backend.schemas",
        "peekOfCode": "class Response(BaseModel):\n    message: Optional[str] = \"\"\n    data: Optional[Any] = {}\n    status_code: Optional[int] = 0\n    error: Optional[Any] = \"\"",
        "detail": "backend.schemas",
        "documentation": {}
    }
]